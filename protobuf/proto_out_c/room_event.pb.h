// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: room_event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_room_5fevent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_room_5fevent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_room_5fevent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_room_5fevent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_room_5fevent_2eproto;
class EndGame;
struct EndGameDefaultTypeInternal;
extern EndGameDefaultTypeInternal _EndGame_default_instance_;
class GetReplay;
struct GetReplayDefaultTypeInternal;
extern GetReplayDefaultTypeInternal _GetReplay_default_instance_;
class StartGame;
struct StartGameDefaultTypeInternal;
extern StartGameDefaultTypeInternal _StartGame_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::EndGame* Arena::CreateMaybeMessage<::EndGame>(Arena*);
template<> ::GetReplay* Arena::CreateMaybeMessage<::GetReplay>(Arena*);
template<> ::StartGame* Arena::CreateMaybeMessage<::StartGame>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class StartGame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StartGame) */ {
 public:
  inline StartGame() : StartGame(nullptr) {}
  ~StartGame() override;
  explicit constexpr StartGame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartGame(const StartGame& from);
  StartGame(StartGame&& from) noexcept
    : StartGame() {
    *this = ::std::move(from);
  }

  inline StartGame& operator=(const StartGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartGame& operator=(StartGame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartGame& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartGame* internal_default_instance() {
    return reinterpret_cast<const StartGame*>(
               &_StartGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StartGame& a, StartGame& b) {
    a.Swap(&b);
  }
  inline void Swap(StartGame* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartGame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartGame* New() const final {
    return new StartGame();
  }

  StartGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartGame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartGame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StartGame& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartGame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StartGame";
  }
  protected:
  explicit StartGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:StartGame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_room_5fevent_2eproto;
};
// -------------------------------------------------------------------

class EndGame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EndGame) */ {
 public:
  inline EndGame() : EndGame(nullptr) {}
  ~EndGame() override;
  explicit constexpr EndGame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EndGame(const EndGame& from);
  EndGame(EndGame&& from) noexcept
    : EndGame() {
    *this = ::std::move(from);
  }

  inline EndGame& operator=(const EndGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndGame& operator=(EndGame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EndGame& default_instance() {
    return *internal_default_instance();
  }
  static inline const EndGame* internal_default_instance() {
    return reinterpret_cast<const EndGame*>(
               &_EndGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EndGame& a, EndGame& b) {
    a.Swap(&b);
  }
  inline void Swap(EndGame* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EndGame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EndGame* New() const final {
    return new EndGame();
  }

  EndGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EndGame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EndGame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EndGame& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndGame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EndGame";
  }
  protected:
  explicit EndGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:EndGame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_room_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GetReplay final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetReplay) */ {
 public:
  inline GetReplay() : GetReplay(nullptr) {}
  ~GetReplay() override;
  explicit constexpr GetReplay(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetReplay(const GetReplay& from);
  GetReplay(GetReplay&& from) noexcept
    : GetReplay() {
    *this = ::std::move(from);
  }

  inline GetReplay& operator=(const GetReplay& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetReplay& operator=(GetReplay&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetReplay& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetReplay* internal_default_instance() {
    return reinterpret_cast<const GetReplay*>(
               &_GetReplay_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetReplay& a, GetReplay& b) {
    a.Swap(&b);
  }
  inline void Swap(GetReplay* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetReplay* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetReplay* New() const final {
    return new GetReplay();
  }

  GetReplay* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetReplay>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetReplay& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetReplay& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetReplay* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetReplay";
  }
  protected:
  explicit GetReplay(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
  };
  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GetReplay)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_room_5fevent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StartGame

// int32 uid = 1;
inline void StartGame::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StartGame::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StartGame::uid() const {
  // @@protoc_insertion_point(field_get:StartGame.uid)
  return _internal_uid();
}
inline void StartGame::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void StartGame::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:StartGame.uid)
}

// -------------------------------------------------------------------

// EndGame

// int32 uid = 1;
inline void EndGame::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EndGame::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EndGame::uid() const {
  // @@protoc_insertion_point(field_get:EndGame.uid)
  return _internal_uid();
}
inline void EndGame::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void EndGame::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:EndGame.uid)
}

// -------------------------------------------------------------------

// GetReplay

// int32 uid = 1;
inline void GetReplay::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetReplay::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetReplay::uid() const {
  // @@protoc_insertion_point(field_get:GetReplay.uid)
  return _internal_uid();
}
inline void GetReplay::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void GetReplay::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:GetReplay.uid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_room_5fevent_2eproto
