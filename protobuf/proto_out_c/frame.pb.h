// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frame.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frame_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frame_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frame_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frame_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frame_2eproto;
class Frame;
struct FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class GameReplay;
struct GameReplayDefaultTypeInternal;
extern GameReplayDefaultTypeInternal _GameReplay_default_instance_;
class PlayerOperate;
struct PlayerOperateDefaultTypeInternal;
extern PlayerOperateDefaultTypeInternal _PlayerOperate_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Frame* Arena::CreateMaybeMessage<::Frame>(Arena*);
template<> ::GameReplay* Arena::CreateMaybeMessage<::GameReplay>(Arena*);
template<> ::PlayerOperate* Arena::CreateMaybeMessage<::PlayerOperate>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum OperateType : int {
  EnterRoom = 0,
  Keyboard = 1,
  OperateType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OperateType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OperateType_IsValid(int value);
constexpr OperateType OperateType_MIN = EnterRoom;
constexpr OperateType OperateType_MAX = Keyboard;
constexpr int OperateType_ARRAYSIZE = OperateType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OperateType_descriptor();
template<typename T>
inline const std::string& OperateType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OperateType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OperateType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OperateType_descriptor(), enum_t_value);
}
inline bool OperateType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OperateType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OperateType>(
    OperateType_descriptor(), name, value);
}
// ===================================================================

class PlayerOperate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerOperate) */ {
 public:
  inline PlayerOperate() : PlayerOperate(nullptr) {}
  ~PlayerOperate() override;
  explicit constexpr PlayerOperate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerOperate(const PlayerOperate& from);
  PlayerOperate(PlayerOperate&& from) noexcept
    : PlayerOperate() {
    *this = ::std::move(from);
  }

  inline PlayerOperate& operator=(const PlayerOperate& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerOperate& operator=(PlayerOperate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerOperate& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerOperate* internal_default_instance() {
    return reinterpret_cast<const PlayerOperate*>(
               &_PlayerOperate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PlayerOperate& a, PlayerOperate& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerOperate* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerOperate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerOperate* New() const final {
    return new PlayerOperate();
  }

  PlayerOperate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerOperate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerOperate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlayerOperate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerOperate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerOperate";
  }
  protected:
  explicit PlayerOperate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kUidFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // repeated int32 data = 3;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_data() const;
  void _internal_add_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_data();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 data(int index) const;
  void set_data(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_data();

  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .OperateType type = 2;
  void clear_type();
  ::OperateType type() const;
  void set_type(::OperateType value);
  private:
  ::OperateType _internal_type() const;
  void _internal_set_type(::OperateType value);
  public:

  // @@protoc_insertion_point(class_scope:PlayerOperate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frame_2eproto;
};
// -------------------------------------------------------------------

class Frame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Frame) */ {
 public:
  inline Frame() : Frame(nullptr) {}
  ~Frame() override;
  explicit constexpr Frame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Frame(const Frame& from);
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frame& operator=(Frame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Frame& default_instance() {
    return *internal_default_instance();
  }
  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }
  inline void Swap(Frame* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Frame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Frame* New() const final {
    return new Frame();
  }

  Frame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Frame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Frame& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Frame";
  }
  protected:
  explicit Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperatesFieldNumber = 2,
    kFrameIdFieldNumber = 1,
  };
  // repeated .PlayerOperate operates = 2;
  int operates_size() const;
  private:
  int _internal_operates_size() const;
  public:
  void clear_operates();
  ::PlayerOperate* mutable_operates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerOperate >*
      mutable_operates();
  private:
  const ::PlayerOperate& _internal_operates(int index) const;
  ::PlayerOperate* _internal_add_operates();
  public:
  const ::PlayerOperate& operates(int index) const;
  ::PlayerOperate* add_operates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerOperate >&
      operates() const;

  // int32 frame_id = 1;
  void clear_frame_id();
  ::PROTOBUF_NAMESPACE_ID::int32 frame_id() const;
  void set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frame_id() const;
  void _internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Frame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerOperate > operates_;
  ::PROTOBUF_NAMESPACE_ID::int32 frame_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frame_2eproto;
};
// -------------------------------------------------------------------

class GameReplay final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GameReplay) */ {
 public:
  inline GameReplay() : GameReplay(nullptr) {}
  ~GameReplay() override;
  explicit constexpr GameReplay(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameReplay(const GameReplay& from);
  GameReplay(GameReplay&& from) noexcept
    : GameReplay() {
    *this = ::std::move(from);
  }

  inline GameReplay& operator=(const GameReplay& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameReplay& operator=(GameReplay&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameReplay& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameReplay* internal_default_instance() {
    return reinterpret_cast<const GameReplay*>(
               &_GameReplay_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GameReplay& a, GameReplay& b) {
    a.Swap(&b);
  }
  inline void Swap(GameReplay* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameReplay* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameReplay* New() const final {
    return new GameReplay();
  }

  GameReplay* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameReplay>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameReplay& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GameReplay& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameReplay* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameReplay";
  }
  protected:
  explicit GameReplay(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFramesFieldNumber = 1,
  };
  // repeated .Frame frames = 1;
  int frames_size() const;
  private:
  int _internal_frames_size() const;
  public:
  void clear_frames();
  ::Frame* mutable_frames(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Frame >*
      mutable_frames();
  private:
  const ::Frame& _internal_frames(int index) const;
  ::Frame* _internal_add_frames();
  public:
  const ::Frame& frames(int index) const;
  ::Frame* add_frames();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Frame >&
      frames() const;

  // @@protoc_insertion_point(class_scope:GameReplay)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Frame > frames_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frame_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlayerOperate

// int32 uid = 1;
inline void PlayerOperate::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerOperate::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerOperate::uid() const {
  // @@protoc_insertion_point(field_get:PlayerOperate.uid)
  return _internal_uid();
}
inline void PlayerOperate::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void PlayerOperate::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:PlayerOperate.uid)
}

// .OperateType type = 2;
inline void PlayerOperate::clear_type() {
  type_ = 0;
}
inline ::OperateType PlayerOperate::_internal_type() const {
  return static_cast< ::OperateType >(type_);
}
inline ::OperateType PlayerOperate::type() const {
  // @@protoc_insertion_point(field_get:PlayerOperate.type)
  return _internal_type();
}
inline void PlayerOperate::_internal_set_type(::OperateType value) {
  
  type_ = value;
}
inline void PlayerOperate::set_type(::OperateType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:PlayerOperate.type)
}

// repeated int32 data = 3;
inline int PlayerOperate::_internal_data_size() const {
  return data_.size();
}
inline int PlayerOperate::data_size() const {
  return _internal_data_size();
}
inline void PlayerOperate::clear_data() {
  data_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerOperate::_internal_data(int index) const {
  return data_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerOperate::data(int index) const {
  // @@protoc_insertion_point(field_get:PlayerOperate.data)
  return _internal_data(index);
}
inline void PlayerOperate::set_data(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlayerOperate.data)
}
inline void PlayerOperate::_internal_add_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  data_.Add(value);
}
inline void PlayerOperate::add_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:PlayerOperate.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PlayerOperate::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PlayerOperate::data() const {
  // @@protoc_insertion_point(field_list:PlayerOperate.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PlayerOperate::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PlayerOperate::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:PlayerOperate.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// Frame

// int32 frame_id = 1;
inline void Frame::clear_frame_id() {
  frame_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Frame::_internal_frame_id() const {
  return frame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Frame::frame_id() const {
  // @@protoc_insertion_point(field_get:Frame.frame_id)
  return _internal_frame_id();
}
inline void Frame::_internal_set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  frame_id_ = value;
}
inline void Frame::set_frame_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:Frame.frame_id)
}

// repeated .PlayerOperate operates = 2;
inline int Frame::_internal_operates_size() const {
  return operates_.size();
}
inline int Frame::operates_size() const {
  return _internal_operates_size();
}
inline void Frame::clear_operates() {
  operates_.Clear();
}
inline ::PlayerOperate* Frame::mutable_operates(int index) {
  // @@protoc_insertion_point(field_mutable:Frame.operates)
  return operates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerOperate >*
Frame::mutable_operates() {
  // @@protoc_insertion_point(field_mutable_list:Frame.operates)
  return &operates_;
}
inline const ::PlayerOperate& Frame::_internal_operates(int index) const {
  return operates_.Get(index);
}
inline const ::PlayerOperate& Frame::operates(int index) const {
  // @@protoc_insertion_point(field_get:Frame.operates)
  return _internal_operates(index);
}
inline ::PlayerOperate* Frame::_internal_add_operates() {
  return operates_.Add();
}
inline ::PlayerOperate* Frame::add_operates() {
  ::PlayerOperate* _add = _internal_add_operates();
  // @@protoc_insertion_point(field_add:Frame.operates)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerOperate >&
Frame::operates() const {
  // @@protoc_insertion_point(field_list:Frame.operates)
  return operates_;
}

// -------------------------------------------------------------------

// GameReplay

// repeated .Frame frames = 1;
inline int GameReplay::_internal_frames_size() const {
  return frames_.size();
}
inline int GameReplay::frames_size() const {
  return _internal_frames_size();
}
inline void GameReplay::clear_frames() {
  frames_.Clear();
}
inline ::Frame* GameReplay::mutable_frames(int index) {
  // @@protoc_insertion_point(field_mutable:GameReplay.frames)
  return frames_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Frame >*
GameReplay::mutable_frames() {
  // @@protoc_insertion_point(field_mutable_list:GameReplay.frames)
  return &frames_;
}
inline const ::Frame& GameReplay::_internal_frames(int index) const {
  return frames_.Get(index);
}
inline const ::Frame& GameReplay::frames(int index) const {
  // @@protoc_insertion_point(field_get:GameReplay.frames)
  return _internal_frames(index);
}
inline ::Frame* GameReplay::_internal_add_frames() {
  return frames_.Add();
}
inline ::Frame* GameReplay::add_frames() {
  ::Frame* _add = _internal_add_frames();
  // @@protoc_insertion_point(field_add:GameReplay.frames)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Frame >&
GameReplay::frames() const {
  // @@protoc_insertion_point(field_list:GameReplay.frames)
  return frames_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::OperateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::OperateType>() {
  return ::OperateType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frame_2eproto
