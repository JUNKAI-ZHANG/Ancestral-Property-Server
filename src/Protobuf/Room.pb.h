// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Room.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Room_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Room_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Room_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Room_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Room_2eproto;
namespace RoomProto {
class CreateRoom;
struct CreateRoomDefaultTypeInternal;
extern CreateRoomDefaultTypeInternal _CreateRoom_default_instance_;
class GetRoomList;
struct GetRoomListDefaultTypeInternal;
extern GetRoomListDefaultTypeInternal _GetRoomList_default_instance_;
class JoinRoom;
struct JoinRoomDefaultTypeInternal;
extern JoinRoomDefaultTypeInternal _JoinRoom_default_instance_;
class LeaveRoom;
struct LeaveRoomDefaultTypeInternal;
extern LeaveRoomDefaultTypeInternal _LeaveRoom_default_instance_;
}  // namespace RoomProto
PROTOBUF_NAMESPACE_OPEN
template<> ::RoomProto::CreateRoom* Arena::CreateMaybeMessage<::RoomProto::CreateRoom>(Arena*);
template<> ::RoomProto::GetRoomList* Arena::CreateMaybeMessage<::RoomProto::GetRoomList>(Arena*);
template<> ::RoomProto::JoinRoom* Arena::CreateMaybeMessage<::RoomProto::JoinRoom>(Arena*);
template<> ::RoomProto::LeaveRoom* Arena::CreateMaybeMessage<::RoomProto::LeaveRoom>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace RoomProto {

enum JoinRoom_Type : int {
  JoinRoom_Type_REQUEST = 0,
  JoinRoom_Type_RESPONSE = 1,
  JoinRoom_Type_JoinRoom_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  JoinRoom_Type_JoinRoom_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool JoinRoom_Type_IsValid(int value);
constexpr JoinRoom_Type JoinRoom_Type_Type_MIN = JoinRoom_Type_REQUEST;
constexpr JoinRoom_Type JoinRoom_Type_Type_MAX = JoinRoom_Type_RESPONSE;
constexpr int JoinRoom_Type_Type_ARRAYSIZE = JoinRoom_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JoinRoom_Type_descriptor();
template<typename T>
inline const std::string& JoinRoom_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, JoinRoom_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function JoinRoom_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    JoinRoom_Type_descriptor(), enum_t_value);
}
inline bool JoinRoom_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, JoinRoom_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<JoinRoom_Type>(
    JoinRoom_Type_descriptor(), name, value);
}
enum LeaveRoom_Type : int {
  LeaveRoom_Type_REQUEST = 0,
  LeaveRoom_Type_RESPONSE = 1,
  LeaveRoom_Type_LeaveRoom_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LeaveRoom_Type_LeaveRoom_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LeaveRoom_Type_IsValid(int value);
constexpr LeaveRoom_Type LeaveRoom_Type_Type_MIN = LeaveRoom_Type_REQUEST;
constexpr LeaveRoom_Type LeaveRoom_Type_Type_MAX = LeaveRoom_Type_RESPONSE;
constexpr int LeaveRoom_Type_Type_ARRAYSIZE = LeaveRoom_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LeaveRoom_Type_descriptor();
template<typename T>
inline const std::string& LeaveRoom_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LeaveRoom_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LeaveRoom_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LeaveRoom_Type_descriptor(), enum_t_value);
}
inline bool LeaveRoom_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LeaveRoom_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LeaveRoom_Type>(
    LeaveRoom_Type_descriptor(), name, value);
}
enum CreateRoom_Type : int {
  CreateRoom_Type_REQUEST = 0,
  CreateRoom_Type_RESPONSE = 1,
  CreateRoom_Type_CreateRoom_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CreateRoom_Type_CreateRoom_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CreateRoom_Type_IsValid(int value);
constexpr CreateRoom_Type CreateRoom_Type_Type_MIN = CreateRoom_Type_REQUEST;
constexpr CreateRoom_Type CreateRoom_Type_Type_MAX = CreateRoom_Type_RESPONSE;
constexpr int CreateRoom_Type_Type_ARRAYSIZE = CreateRoom_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreateRoom_Type_descriptor();
template<typename T>
inline const std::string& CreateRoom_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CreateRoom_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CreateRoom_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CreateRoom_Type_descriptor(), enum_t_value);
}
inline bool CreateRoom_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CreateRoom_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CreateRoom_Type>(
    CreateRoom_Type_descriptor(), name, value);
}
enum GetRoomList_Type : int {
  GetRoomList_Type_REQUEST = 0,
  GetRoomList_Type_RESPONSE = 1,
  GetRoomList_Type_GetRoomList_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GetRoomList_Type_GetRoomList_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool GetRoomList_Type_IsValid(int value);
constexpr GetRoomList_Type GetRoomList_Type_Type_MIN = GetRoomList_Type_REQUEST;
constexpr GetRoomList_Type GetRoomList_Type_Type_MAX = GetRoomList_Type_RESPONSE;
constexpr int GetRoomList_Type_Type_ARRAYSIZE = GetRoomList_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetRoomList_Type_descriptor();
template<typename T>
inline const std::string& GetRoomList_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GetRoomList_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GetRoomList_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GetRoomList_Type_descriptor(), enum_t_value);
}
inline bool GetRoomList_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GetRoomList_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GetRoomList_Type>(
    GetRoomList_Type_descriptor(), name, value);
}
// ===================================================================

class JoinRoom final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RoomProto.JoinRoom) */ {
 public:
  inline JoinRoom() : JoinRoom(nullptr) {}
  ~JoinRoom() override;
  explicit constexpr JoinRoom(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinRoom(const JoinRoom& from);
  JoinRoom(JoinRoom&& from) noexcept
    : JoinRoom() {
    *this = ::std::move(from);
  }

  inline JoinRoom& operator=(const JoinRoom& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinRoom& operator=(JoinRoom&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JoinRoom& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinRoom* internal_default_instance() {
    return reinterpret_cast<const JoinRoom*>(
               &_JoinRoom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(JoinRoom& a, JoinRoom& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinRoom* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinRoom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JoinRoom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JoinRoom>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JoinRoom& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const JoinRoom& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinRoom* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RoomProto.JoinRoom";
  }
  protected:
  explicit JoinRoom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef JoinRoom_Type Type;
  static constexpr Type REQUEST =
    JoinRoom_Type_REQUEST;
  static constexpr Type RESPONSE =
    JoinRoom_Type_RESPONSE;
  static inline bool Type_IsValid(int value) {
    return JoinRoom_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    JoinRoom_Type_Type_MIN;
  static constexpr Type Type_MAX =
    JoinRoom_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    JoinRoom_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return JoinRoom_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return JoinRoom_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return JoinRoom_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 2,
    kResultFieldNumber = 3,
    kRoomidFieldNumber = 1,
    kTypeFieldNumber = 4,
    kRetFieldNumber = 5,
    kSeedFieldNumber = 6,
  };
  // string userid = 2;
  void clear_userid();
  const std::string& userid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_userid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // string result = 3;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // int32 roomid = 1;
  void clear_roomid();
  int32_t roomid() const;
  void set_roomid(int32_t value);
  private:
  int32_t _internal_roomid() const;
  void _internal_set_roomid(int32_t value);
  public:

  // .RoomProto.JoinRoom.Type type = 4;
  void clear_type();
  ::RoomProto::JoinRoom_Type type() const;
  void set_type(::RoomProto::JoinRoom_Type value);
  private:
  ::RoomProto::JoinRoom_Type _internal_type() const;
  void _internal_set_type(::RoomProto::JoinRoom_Type value);
  public:

  // bool ret = 5;
  void clear_ret();
  bool ret() const;
  void set_ret(bool value);
  private:
  bool _internal_ret() const;
  void _internal_set_ret(bool value);
  public:

  // uint32 seed = 6;
  void clear_seed();
  uint32_t seed() const;
  void set_seed(uint32_t value);
  private:
  uint32_t _internal_seed() const;
  void _internal_set_seed(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:RoomProto.JoinRoom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  int32_t roomid_;
  int type_;
  bool ret_;
  uint32_t seed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Room_2eproto;
};
// -------------------------------------------------------------------

class LeaveRoom final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RoomProto.LeaveRoom) */ {
 public:
  inline LeaveRoom() : LeaveRoom(nullptr) {}
  ~LeaveRoom() override;
  explicit constexpr LeaveRoom(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LeaveRoom(const LeaveRoom& from);
  LeaveRoom(LeaveRoom&& from) noexcept
    : LeaveRoom() {
    *this = ::std::move(from);
  }

  inline LeaveRoom& operator=(const LeaveRoom& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaveRoom& operator=(LeaveRoom&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LeaveRoom& default_instance() {
    return *internal_default_instance();
  }
  static inline const LeaveRoom* internal_default_instance() {
    return reinterpret_cast<const LeaveRoom*>(
               &_LeaveRoom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LeaveRoom& a, LeaveRoom& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaveRoom* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeaveRoom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LeaveRoom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LeaveRoom>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LeaveRoom& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LeaveRoom& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaveRoom* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RoomProto.LeaveRoom";
  }
  protected:
  explicit LeaveRoom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LeaveRoom_Type Type;
  static constexpr Type REQUEST =
    LeaveRoom_Type_REQUEST;
  static constexpr Type RESPONSE =
    LeaveRoom_Type_RESPONSE;
  static inline bool Type_IsValid(int value) {
    return LeaveRoom_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    LeaveRoom_Type_Type_MIN;
  static constexpr Type Type_MAX =
    LeaveRoom_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    LeaveRoom_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return LeaveRoom_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return LeaveRoom_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return LeaveRoom_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 2,
    kResultFieldNumber = 3,
    kRoomidFieldNumber = 1,
    kTypeFieldNumber = 4,
    kRetFieldNumber = 5,
  };
  // string userid = 2;
  void clear_userid();
  const std::string& userid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_userid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // string result = 3;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // int32 roomid = 1;
  void clear_roomid();
  int32_t roomid() const;
  void set_roomid(int32_t value);
  private:
  int32_t _internal_roomid() const;
  void _internal_set_roomid(int32_t value);
  public:

  // .RoomProto.LeaveRoom.Type type = 4;
  void clear_type();
  ::RoomProto::LeaveRoom_Type type() const;
  void set_type(::RoomProto::LeaveRoom_Type value);
  private:
  ::RoomProto::LeaveRoom_Type _internal_type() const;
  void _internal_set_type(::RoomProto::LeaveRoom_Type value);
  public:

  // bool ret = 5;
  void clear_ret();
  bool ret() const;
  void set_ret(bool value);
  private:
  bool _internal_ret() const;
  void _internal_set_ret(bool value);
  public:

  // @@protoc_insertion_point(class_scope:RoomProto.LeaveRoom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  int32_t roomid_;
  int type_;
  bool ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Room_2eproto;
};
// -------------------------------------------------------------------

class CreateRoom final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RoomProto.CreateRoom) */ {
 public:
  inline CreateRoom() : CreateRoom(nullptr) {}
  ~CreateRoom() override;
  explicit constexpr CreateRoom(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateRoom(const CreateRoom& from);
  CreateRoom(CreateRoom&& from) noexcept
    : CreateRoom() {
    *this = ::std::move(from);
  }

  inline CreateRoom& operator=(const CreateRoom& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRoom& operator=(CreateRoom&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateRoom& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateRoom* internal_default_instance() {
    return reinterpret_cast<const CreateRoom*>(
               &_CreateRoom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateRoom& a, CreateRoom& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRoom* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRoom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateRoom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateRoom>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateRoom& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateRoom& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRoom* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RoomProto.CreateRoom";
  }
  protected:
  explicit CreateRoom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CreateRoom_Type Type;
  static constexpr Type REQUEST =
    CreateRoom_Type_REQUEST;
  static constexpr Type RESPONSE =
    CreateRoom_Type_RESPONSE;
  static inline bool Type_IsValid(int value) {
    return CreateRoom_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    CreateRoom_Type_Type_MIN;
  static constexpr Type Type_MAX =
    CreateRoom_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    CreateRoom_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return CreateRoom_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return CreateRoom_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return CreateRoom_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 2,
    kResultFieldNumber = 4,
    kRoomnameFieldNumber = 5,
    kRoomidFieldNumber = 1,
    kRetFieldNumber = 3,
    kTypeFieldNumber = 6,
    kSeedFieldNumber = 7,
  };
  // string userid = 2;
  void clear_userid();
  const std::string& userid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_userid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // string result = 4;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // string roomname = 5;
  void clear_roomname();
  const std::string& roomname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roomname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roomname();
  PROTOBUF_NODISCARD std::string* release_roomname();
  void set_allocated_roomname(std::string* roomname);
  private:
  const std::string& _internal_roomname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roomname(const std::string& value);
  std::string* _internal_mutable_roomname();
  public:

  // int32 roomid = 1;
  void clear_roomid();
  int32_t roomid() const;
  void set_roomid(int32_t value);
  private:
  int32_t _internal_roomid() const;
  void _internal_set_roomid(int32_t value);
  public:

  // bool ret = 3;
  void clear_ret();
  bool ret() const;
  void set_ret(bool value);
  private:
  bool _internal_ret() const;
  void _internal_set_ret(bool value);
  public:

  // .RoomProto.CreateRoom.Type type = 6;
  void clear_type();
  ::RoomProto::CreateRoom_Type type() const;
  void set_type(::RoomProto::CreateRoom_Type value);
  private:
  ::RoomProto::CreateRoom_Type _internal_type() const;
  void _internal_set_type(::RoomProto::CreateRoom_Type value);
  public:

  // uint32 seed = 7;
  void clear_seed();
  uint32_t seed() const;
  void set_seed(uint32_t value);
  private:
  uint32_t _internal_seed() const;
  void _internal_set_seed(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:RoomProto.CreateRoom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomname_;
  int32_t roomid_;
  bool ret_;
  int type_;
  uint32_t seed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Room_2eproto;
};
// -------------------------------------------------------------------

class GetRoomList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RoomProto.GetRoomList) */ {
 public:
  inline GetRoomList() : GetRoomList(nullptr) {}
  ~GetRoomList() override;
  explicit constexpr GetRoomList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRoomList(const GetRoomList& from);
  GetRoomList(GetRoomList&& from) noexcept
    : GetRoomList() {
    *this = ::std::move(from);
  }

  inline GetRoomList& operator=(const GetRoomList& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRoomList& operator=(GetRoomList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRoomList& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRoomList* internal_default_instance() {
    return reinterpret_cast<const GetRoomList*>(
               &_GetRoomList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetRoomList& a, GetRoomList& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRoomList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRoomList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRoomList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRoomList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRoomList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetRoomList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRoomList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RoomProto.GetRoomList";
  }
  protected:
  explicit GetRoomList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetRoomList_Type Type;
  static constexpr Type REQUEST =
    GetRoomList_Type_REQUEST;
  static constexpr Type RESPONSE =
    GetRoomList_Type_RESPONSE;
  static inline bool Type_IsValid(int value) {
    return GetRoomList_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    GetRoomList_Type_Type_MIN;
  static constexpr Type Type_MAX =
    GetRoomList_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    GetRoomList_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return GetRoomList_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return GetRoomList_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return GetRoomList_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRoomlistFieldNumber = 1,
    kPeoplecountFieldNumber = 2,
    kUseridFieldNumber = 6,
    kSizeFieldNumber = 3,
    kRetFieldNumber = 4,
    kTypeFieldNumber = 5,
  };
  // repeated int32 roomlist = 1;
  int roomlist_size() const;
  private:
  int _internal_roomlist_size() const;
  public:
  void clear_roomlist();
  private:
  int32_t _internal_roomlist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_roomlist() const;
  void _internal_add_roomlist(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_roomlist();
  public:
  int32_t roomlist(int index) const;
  void set_roomlist(int index, int32_t value);
  void add_roomlist(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      roomlist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_roomlist();

  // repeated int32 peoplecount = 2;
  int peoplecount_size() const;
  private:
  int _internal_peoplecount_size() const;
  public:
  void clear_peoplecount();
  private:
  int32_t _internal_peoplecount(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_peoplecount() const;
  void _internal_add_peoplecount(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_peoplecount();
  public:
  int32_t peoplecount(int index) const;
  void set_peoplecount(int index, int32_t value);
  void add_peoplecount(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      peoplecount() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_peoplecount();

  // string userid = 6;
  void clear_userid();
  const std::string& userid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_userid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // int32 size = 3;
  void clear_size();
  int32_t size() const;
  void set_size(int32_t value);
  private:
  int32_t _internal_size() const;
  void _internal_set_size(int32_t value);
  public:

  // bool ret = 4;
  void clear_ret();
  bool ret() const;
  void set_ret(bool value);
  private:
  bool _internal_ret() const;
  void _internal_set_ret(bool value);
  public:

  // .RoomProto.GetRoomList.Type type = 5;
  void clear_type();
  ::RoomProto::GetRoomList_Type type() const;
  void set_type(::RoomProto::GetRoomList_Type value);
  private:
  ::RoomProto::GetRoomList_Type _internal_type() const;
  void _internal_set_type(::RoomProto::GetRoomList_Type value);
  public:

  // @@protoc_insertion_point(class_scope:RoomProto.GetRoomList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > roomlist_;
  mutable std::atomic<int> _roomlist_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > peoplecount_;
  mutable std::atomic<int> _peoplecount_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  int32_t size_;
  bool ret_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Room_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// JoinRoom

// int32 roomid = 1;
inline void JoinRoom::clear_roomid() {
  roomid_ = 0;
}
inline int32_t JoinRoom::_internal_roomid() const {
  return roomid_;
}
inline int32_t JoinRoom::roomid() const {
  // @@protoc_insertion_point(field_get:RoomProto.JoinRoom.roomid)
  return _internal_roomid();
}
inline void JoinRoom::_internal_set_roomid(int32_t value) {
  
  roomid_ = value;
}
inline void JoinRoom::set_roomid(int32_t value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:RoomProto.JoinRoom.roomid)
}

// string userid = 2;
inline void JoinRoom::clear_userid() {
  userid_.ClearToEmpty();
}
inline const std::string& JoinRoom::userid() const {
  // @@protoc_insertion_point(field_get:RoomProto.JoinRoom.userid)
  return _internal_userid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JoinRoom::set_userid(ArgT0&& arg0, ArgT... args) {
 
 userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RoomProto.JoinRoom.userid)
}
inline std::string* JoinRoom::mutable_userid() {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:RoomProto.JoinRoom.userid)
  return _s;
}
inline const std::string& JoinRoom::_internal_userid() const {
  return userid_.Get();
}
inline void JoinRoom::_internal_set_userid(const std::string& value) {
  
  userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* JoinRoom::_internal_mutable_userid() {
  
  return userid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* JoinRoom::release_userid() {
  // @@protoc_insertion_point(field_release:RoomProto.JoinRoom.userid)
  return userid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void JoinRoom::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (userid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RoomProto.JoinRoom.userid)
}

// string result = 3;
inline void JoinRoom::clear_result() {
  result_.ClearToEmpty();
}
inline const std::string& JoinRoom::result() const {
  // @@protoc_insertion_point(field_get:RoomProto.JoinRoom.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JoinRoom::set_result(ArgT0&& arg0, ArgT... args) {
 
 result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RoomProto.JoinRoom.result)
}
inline std::string* JoinRoom::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:RoomProto.JoinRoom.result)
  return _s;
}
inline const std::string& JoinRoom::_internal_result() const {
  return result_.Get();
}
inline void JoinRoom::_internal_set_result(const std::string& value) {
  
  result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* JoinRoom::_internal_mutable_result() {
  
  return result_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* JoinRoom::release_result() {
  // @@protoc_insertion_point(field_release:RoomProto.JoinRoom.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void JoinRoom::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (result_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RoomProto.JoinRoom.result)
}

// .RoomProto.JoinRoom.Type type = 4;
inline void JoinRoom::clear_type() {
  type_ = 0;
}
inline ::RoomProto::JoinRoom_Type JoinRoom::_internal_type() const {
  return static_cast< ::RoomProto::JoinRoom_Type >(type_);
}
inline ::RoomProto::JoinRoom_Type JoinRoom::type() const {
  // @@protoc_insertion_point(field_get:RoomProto.JoinRoom.type)
  return _internal_type();
}
inline void JoinRoom::_internal_set_type(::RoomProto::JoinRoom_Type value) {
  
  type_ = value;
}
inline void JoinRoom::set_type(::RoomProto::JoinRoom_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:RoomProto.JoinRoom.type)
}

// bool ret = 5;
inline void JoinRoom::clear_ret() {
  ret_ = false;
}
inline bool JoinRoom::_internal_ret() const {
  return ret_;
}
inline bool JoinRoom::ret() const {
  // @@protoc_insertion_point(field_get:RoomProto.JoinRoom.ret)
  return _internal_ret();
}
inline void JoinRoom::_internal_set_ret(bool value) {
  
  ret_ = value;
}
inline void JoinRoom::set_ret(bool value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:RoomProto.JoinRoom.ret)
}

// uint32 seed = 6;
inline void JoinRoom::clear_seed() {
  seed_ = 0u;
}
inline uint32_t JoinRoom::_internal_seed() const {
  return seed_;
}
inline uint32_t JoinRoom::seed() const {
  // @@protoc_insertion_point(field_get:RoomProto.JoinRoom.seed)
  return _internal_seed();
}
inline void JoinRoom::_internal_set_seed(uint32_t value) {
  
  seed_ = value;
}
inline void JoinRoom::set_seed(uint32_t value) {
  _internal_set_seed(value);
  // @@protoc_insertion_point(field_set:RoomProto.JoinRoom.seed)
}

// -------------------------------------------------------------------

// LeaveRoom

// int32 roomid = 1;
inline void LeaveRoom::clear_roomid() {
  roomid_ = 0;
}
inline int32_t LeaveRoom::_internal_roomid() const {
  return roomid_;
}
inline int32_t LeaveRoom::roomid() const {
  // @@protoc_insertion_point(field_get:RoomProto.LeaveRoom.roomid)
  return _internal_roomid();
}
inline void LeaveRoom::_internal_set_roomid(int32_t value) {
  
  roomid_ = value;
}
inline void LeaveRoom::set_roomid(int32_t value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:RoomProto.LeaveRoom.roomid)
}

// string userid = 2;
inline void LeaveRoom::clear_userid() {
  userid_.ClearToEmpty();
}
inline const std::string& LeaveRoom::userid() const {
  // @@protoc_insertion_point(field_get:RoomProto.LeaveRoom.userid)
  return _internal_userid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LeaveRoom::set_userid(ArgT0&& arg0, ArgT... args) {
 
 userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RoomProto.LeaveRoom.userid)
}
inline std::string* LeaveRoom::mutable_userid() {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:RoomProto.LeaveRoom.userid)
  return _s;
}
inline const std::string& LeaveRoom::_internal_userid() const {
  return userid_.Get();
}
inline void LeaveRoom::_internal_set_userid(const std::string& value) {
  
  userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LeaveRoom::_internal_mutable_userid() {
  
  return userid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LeaveRoom::release_userid() {
  // @@protoc_insertion_point(field_release:RoomProto.LeaveRoom.userid)
  return userid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LeaveRoom::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (userid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RoomProto.LeaveRoom.userid)
}

// string result = 3;
inline void LeaveRoom::clear_result() {
  result_.ClearToEmpty();
}
inline const std::string& LeaveRoom::result() const {
  // @@protoc_insertion_point(field_get:RoomProto.LeaveRoom.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LeaveRoom::set_result(ArgT0&& arg0, ArgT... args) {
 
 result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RoomProto.LeaveRoom.result)
}
inline std::string* LeaveRoom::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:RoomProto.LeaveRoom.result)
  return _s;
}
inline const std::string& LeaveRoom::_internal_result() const {
  return result_.Get();
}
inline void LeaveRoom::_internal_set_result(const std::string& value) {
  
  result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LeaveRoom::_internal_mutable_result() {
  
  return result_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LeaveRoom::release_result() {
  // @@protoc_insertion_point(field_release:RoomProto.LeaveRoom.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LeaveRoom::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (result_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RoomProto.LeaveRoom.result)
}

// .RoomProto.LeaveRoom.Type type = 4;
inline void LeaveRoom::clear_type() {
  type_ = 0;
}
inline ::RoomProto::LeaveRoom_Type LeaveRoom::_internal_type() const {
  return static_cast< ::RoomProto::LeaveRoom_Type >(type_);
}
inline ::RoomProto::LeaveRoom_Type LeaveRoom::type() const {
  // @@protoc_insertion_point(field_get:RoomProto.LeaveRoom.type)
  return _internal_type();
}
inline void LeaveRoom::_internal_set_type(::RoomProto::LeaveRoom_Type value) {
  
  type_ = value;
}
inline void LeaveRoom::set_type(::RoomProto::LeaveRoom_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:RoomProto.LeaveRoom.type)
}

// bool ret = 5;
inline void LeaveRoom::clear_ret() {
  ret_ = false;
}
inline bool LeaveRoom::_internal_ret() const {
  return ret_;
}
inline bool LeaveRoom::ret() const {
  // @@protoc_insertion_point(field_get:RoomProto.LeaveRoom.ret)
  return _internal_ret();
}
inline void LeaveRoom::_internal_set_ret(bool value) {
  
  ret_ = value;
}
inline void LeaveRoom::set_ret(bool value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:RoomProto.LeaveRoom.ret)
}

// -------------------------------------------------------------------

// CreateRoom

// int32 roomid = 1;
inline void CreateRoom::clear_roomid() {
  roomid_ = 0;
}
inline int32_t CreateRoom::_internal_roomid() const {
  return roomid_;
}
inline int32_t CreateRoom::roomid() const {
  // @@protoc_insertion_point(field_get:RoomProto.CreateRoom.roomid)
  return _internal_roomid();
}
inline void CreateRoom::_internal_set_roomid(int32_t value) {
  
  roomid_ = value;
}
inline void CreateRoom::set_roomid(int32_t value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:RoomProto.CreateRoom.roomid)
}

// string userid = 2;
inline void CreateRoom::clear_userid() {
  userid_.ClearToEmpty();
}
inline const std::string& CreateRoom::userid() const {
  // @@protoc_insertion_point(field_get:RoomProto.CreateRoom.userid)
  return _internal_userid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateRoom::set_userid(ArgT0&& arg0, ArgT... args) {
 
 userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RoomProto.CreateRoom.userid)
}
inline std::string* CreateRoom::mutable_userid() {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:RoomProto.CreateRoom.userid)
  return _s;
}
inline const std::string& CreateRoom::_internal_userid() const {
  return userid_.Get();
}
inline void CreateRoom::_internal_set_userid(const std::string& value) {
  
  userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateRoom::_internal_mutable_userid() {
  
  return userid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateRoom::release_userid() {
  // @@protoc_insertion_point(field_release:RoomProto.CreateRoom.userid)
  return userid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateRoom::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (userid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RoomProto.CreateRoom.userid)
}

// bool ret = 3;
inline void CreateRoom::clear_ret() {
  ret_ = false;
}
inline bool CreateRoom::_internal_ret() const {
  return ret_;
}
inline bool CreateRoom::ret() const {
  // @@protoc_insertion_point(field_get:RoomProto.CreateRoom.ret)
  return _internal_ret();
}
inline void CreateRoom::_internal_set_ret(bool value) {
  
  ret_ = value;
}
inline void CreateRoom::set_ret(bool value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:RoomProto.CreateRoom.ret)
}

// string result = 4;
inline void CreateRoom::clear_result() {
  result_.ClearToEmpty();
}
inline const std::string& CreateRoom::result() const {
  // @@protoc_insertion_point(field_get:RoomProto.CreateRoom.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateRoom::set_result(ArgT0&& arg0, ArgT... args) {
 
 result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RoomProto.CreateRoom.result)
}
inline std::string* CreateRoom::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:RoomProto.CreateRoom.result)
  return _s;
}
inline const std::string& CreateRoom::_internal_result() const {
  return result_.Get();
}
inline void CreateRoom::_internal_set_result(const std::string& value) {
  
  result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateRoom::_internal_mutable_result() {
  
  return result_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateRoom::release_result() {
  // @@protoc_insertion_point(field_release:RoomProto.CreateRoom.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateRoom::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (result_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RoomProto.CreateRoom.result)
}

// string roomname = 5;
inline void CreateRoom::clear_roomname() {
  roomname_.ClearToEmpty();
}
inline const std::string& CreateRoom::roomname() const {
  // @@protoc_insertion_point(field_get:RoomProto.CreateRoom.roomname)
  return _internal_roomname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateRoom::set_roomname(ArgT0&& arg0, ArgT... args) {
 
 roomname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RoomProto.CreateRoom.roomname)
}
inline std::string* CreateRoom::mutable_roomname() {
  std::string* _s = _internal_mutable_roomname();
  // @@protoc_insertion_point(field_mutable:RoomProto.CreateRoom.roomname)
  return _s;
}
inline const std::string& CreateRoom::_internal_roomname() const {
  return roomname_.Get();
}
inline void CreateRoom::_internal_set_roomname(const std::string& value) {
  
  roomname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateRoom::_internal_mutable_roomname() {
  
  return roomname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateRoom::release_roomname() {
  // @@protoc_insertion_point(field_release:RoomProto.CreateRoom.roomname)
  return roomname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateRoom::set_allocated_roomname(std::string* roomname) {
  if (roomname != nullptr) {
    
  } else {
    
  }
  roomname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (roomname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RoomProto.CreateRoom.roomname)
}

// .RoomProto.CreateRoom.Type type = 6;
inline void CreateRoom::clear_type() {
  type_ = 0;
}
inline ::RoomProto::CreateRoom_Type CreateRoom::_internal_type() const {
  return static_cast< ::RoomProto::CreateRoom_Type >(type_);
}
inline ::RoomProto::CreateRoom_Type CreateRoom::type() const {
  // @@protoc_insertion_point(field_get:RoomProto.CreateRoom.type)
  return _internal_type();
}
inline void CreateRoom::_internal_set_type(::RoomProto::CreateRoom_Type value) {
  
  type_ = value;
}
inline void CreateRoom::set_type(::RoomProto::CreateRoom_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:RoomProto.CreateRoom.type)
}

// uint32 seed = 7;
inline void CreateRoom::clear_seed() {
  seed_ = 0u;
}
inline uint32_t CreateRoom::_internal_seed() const {
  return seed_;
}
inline uint32_t CreateRoom::seed() const {
  // @@protoc_insertion_point(field_get:RoomProto.CreateRoom.seed)
  return _internal_seed();
}
inline void CreateRoom::_internal_set_seed(uint32_t value) {
  
  seed_ = value;
}
inline void CreateRoom::set_seed(uint32_t value) {
  _internal_set_seed(value);
  // @@protoc_insertion_point(field_set:RoomProto.CreateRoom.seed)
}

// -------------------------------------------------------------------

// GetRoomList

// repeated int32 roomlist = 1;
inline int GetRoomList::_internal_roomlist_size() const {
  return roomlist_.size();
}
inline int GetRoomList::roomlist_size() const {
  return _internal_roomlist_size();
}
inline void GetRoomList::clear_roomlist() {
  roomlist_.Clear();
}
inline int32_t GetRoomList::_internal_roomlist(int index) const {
  return roomlist_.Get(index);
}
inline int32_t GetRoomList::roomlist(int index) const {
  // @@protoc_insertion_point(field_get:RoomProto.GetRoomList.roomlist)
  return _internal_roomlist(index);
}
inline void GetRoomList::set_roomlist(int index, int32_t value) {
  roomlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:RoomProto.GetRoomList.roomlist)
}
inline void GetRoomList::_internal_add_roomlist(int32_t value) {
  roomlist_.Add(value);
}
inline void GetRoomList::add_roomlist(int32_t value) {
  _internal_add_roomlist(value);
  // @@protoc_insertion_point(field_add:RoomProto.GetRoomList.roomlist)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
GetRoomList::_internal_roomlist() const {
  return roomlist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
GetRoomList::roomlist() const {
  // @@protoc_insertion_point(field_list:RoomProto.GetRoomList.roomlist)
  return _internal_roomlist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
GetRoomList::_internal_mutable_roomlist() {
  return &roomlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
GetRoomList::mutable_roomlist() {
  // @@protoc_insertion_point(field_mutable_list:RoomProto.GetRoomList.roomlist)
  return _internal_mutable_roomlist();
}

// repeated int32 peoplecount = 2;
inline int GetRoomList::_internal_peoplecount_size() const {
  return peoplecount_.size();
}
inline int GetRoomList::peoplecount_size() const {
  return _internal_peoplecount_size();
}
inline void GetRoomList::clear_peoplecount() {
  peoplecount_.Clear();
}
inline int32_t GetRoomList::_internal_peoplecount(int index) const {
  return peoplecount_.Get(index);
}
inline int32_t GetRoomList::peoplecount(int index) const {
  // @@protoc_insertion_point(field_get:RoomProto.GetRoomList.peoplecount)
  return _internal_peoplecount(index);
}
inline void GetRoomList::set_peoplecount(int index, int32_t value) {
  peoplecount_.Set(index, value);
  // @@protoc_insertion_point(field_set:RoomProto.GetRoomList.peoplecount)
}
inline void GetRoomList::_internal_add_peoplecount(int32_t value) {
  peoplecount_.Add(value);
}
inline void GetRoomList::add_peoplecount(int32_t value) {
  _internal_add_peoplecount(value);
  // @@protoc_insertion_point(field_add:RoomProto.GetRoomList.peoplecount)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
GetRoomList::_internal_peoplecount() const {
  return peoplecount_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
GetRoomList::peoplecount() const {
  // @@protoc_insertion_point(field_list:RoomProto.GetRoomList.peoplecount)
  return _internal_peoplecount();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
GetRoomList::_internal_mutable_peoplecount() {
  return &peoplecount_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
GetRoomList::mutable_peoplecount() {
  // @@protoc_insertion_point(field_mutable_list:RoomProto.GetRoomList.peoplecount)
  return _internal_mutable_peoplecount();
}

// int32 size = 3;
inline void GetRoomList::clear_size() {
  size_ = 0;
}
inline int32_t GetRoomList::_internal_size() const {
  return size_;
}
inline int32_t GetRoomList::size() const {
  // @@protoc_insertion_point(field_get:RoomProto.GetRoomList.size)
  return _internal_size();
}
inline void GetRoomList::_internal_set_size(int32_t value) {
  
  size_ = value;
}
inline void GetRoomList::set_size(int32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:RoomProto.GetRoomList.size)
}

// bool ret = 4;
inline void GetRoomList::clear_ret() {
  ret_ = false;
}
inline bool GetRoomList::_internal_ret() const {
  return ret_;
}
inline bool GetRoomList::ret() const {
  // @@protoc_insertion_point(field_get:RoomProto.GetRoomList.ret)
  return _internal_ret();
}
inline void GetRoomList::_internal_set_ret(bool value) {
  
  ret_ = value;
}
inline void GetRoomList::set_ret(bool value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:RoomProto.GetRoomList.ret)
}

// .RoomProto.GetRoomList.Type type = 5;
inline void GetRoomList::clear_type() {
  type_ = 0;
}
inline ::RoomProto::GetRoomList_Type GetRoomList::_internal_type() const {
  return static_cast< ::RoomProto::GetRoomList_Type >(type_);
}
inline ::RoomProto::GetRoomList_Type GetRoomList::type() const {
  // @@protoc_insertion_point(field_get:RoomProto.GetRoomList.type)
  return _internal_type();
}
inline void GetRoomList::_internal_set_type(::RoomProto::GetRoomList_Type value) {
  
  type_ = value;
}
inline void GetRoomList::set_type(::RoomProto::GetRoomList_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:RoomProto.GetRoomList.type)
}

// string userid = 6;
inline void GetRoomList::clear_userid() {
  userid_.ClearToEmpty();
}
inline const std::string& GetRoomList::userid() const {
  // @@protoc_insertion_point(field_get:RoomProto.GetRoomList.userid)
  return _internal_userid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetRoomList::set_userid(ArgT0&& arg0, ArgT... args) {
 
 userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RoomProto.GetRoomList.userid)
}
inline std::string* GetRoomList::mutable_userid() {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:RoomProto.GetRoomList.userid)
  return _s;
}
inline const std::string& GetRoomList::_internal_userid() const {
  return userid_.Get();
}
inline void GetRoomList::_internal_set_userid(const std::string& value) {
  
  userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetRoomList::_internal_mutable_userid() {
  
  return userid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetRoomList::release_userid() {
  // @@protoc_insertion_point(field_release:RoomProto.GetRoomList.userid)
  return userid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetRoomList::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (userid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RoomProto.GetRoomList.userid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace RoomProto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::RoomProto::JoinRoom_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RoomProto::JoinRoom_Type>() {
  return ::RoomProto::JoinRoom_Type_descriptor();
}
template <> struct is_proto_enum< ::RoomProto::LeaveRoom_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RoomProto::LeaveRoom_Type>() {
  return ::RoomProto::LeaveRoom_Type_descriptor();
}
template <> struct is_proto_enum< ::RoomProto::CreateRoom_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RoomProto::CreateRoom_Type>() {
  return ::RoomProto::CreateRoom_Type_descriptor();
}
template <> struct is_proto_enum< ::RoomProto::GetRoomList_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RoomProto::GetRoomList_Type>() {
  return ::RoomProto::GetRoomList_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Room_2eproto
