// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NetworkData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_NetworkData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_NetworkData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_NetworkData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_NetworkData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_NetworkData_2eproto;
namespace Net {
class CharacterData;
struct CharacterDataDefaultTypeInternal;
extern CharacterDataDefaultTypeInternal _CharacterData_default_instance_;
class Frame;
struct FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class GameState;
struct GameStateDefaultTypeInternal;
extern GameStateDefaultTypeInternal _GameState_default_instance_;
class HashString;
struct HashStringDefaultTypeInternal;
extern HashStringDefaultTypeInternal _HashString_default_instance_;
class LoginData;
struct LoginDataDefaultTypeInternal;
extern LoginDataDefaultTypeInternal _LoginData_default_instance_;
class LoginOut;
struct LoginOutDefaultTypeInternal;
extern LoginOutDefaultTypeInternal _LoginOut_default_instance_;
class LoginResponse;
struct LoginResponseDefaultTypeInternal;
extern LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
class ServerInfo;
struct ServerInfoDefaultTypeInternal;
extern ServerInfoDefaultTypeInternal _ServerInfo_default_instance_;
class UserMoney;
struct UserMoneyDefaultTypeInternal;
extern UserMoneyDefaultTypeInternal _UserMoney_default_instance_;
}  // namespace Net
PROTOBUF_NAMESPACE_OPEN
template<> ::Net::CharacterData* Arena::CreateMaybeMessage<::Net::CharacterData>(Arena*);
template<> ::Net::Frame* Arena::CreateMaybeMessage<::Net::Frame>(Arena*);
template<> ::Net::GameState* Arena::CreateMaybeMessage<::Net::GameState>(Arena*);
template<> ::Net::HashString* Arena::CreateMaybeMessage<::Net::HashString>(Arena*);
template<> ::Net::LoginData* Arena::CreateMaybeMessage<::Net::LoginData>(Arena*);
template<> ::Net::LoginOut* Arena::CreateMaybeMessage<::Net::LoginOut>(Arena*);
template<> ::Net::LoginResponse* Arena::CreateMaybeMessage<::Net::LoginResponse>(Arena*);
template<> ::Net::ServerInfo* Arena::CreateMaybeMessage<::Net::ServerInfo>(Arena*);
template<> ::Net::UserMoney* Arena::CreateMaybeMessage<::Net::UserMoney>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Net {

enum LoginData_Operation : int {
  LoginData_Operation_Login = 0,
  LoginData_Operation_Register = 1,
  LoginData_Operation_LoginData_Operation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LoginData_Operation_LoginData_Operation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LoginData_Operation_IsValid(int value);
constexpr LoginData_Operation LoginData_Operation_Operation_MIN = LoginData_Operation_Login;
constexpr LoginData_Operation LoginData_Operation_Operation_MAX = LoginData_Operation_Register;
constexpr int LoginData_Operation_Operation_ARRAYSIZE = LoginData_Operation_Operation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoginData_Operation_descriptor();
template<typename T>
inline const std::string& LoginData_Operation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LoginData_Operation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LoginData_Operation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LoginData_Operation_descriptor(), enum_t_value);
}
inline bool LoginData_Operation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LoginData_Operation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LoginData_Operation>(
    LoginData_Operation_descriptor(), name, value);
}
enum LoginResponse_Operation : int {
  LoginResponse_Operation_Login = 0,
  LoginResponse_Operation_Register = 1,
  LoginResponse_Operation_LoginResponse_Operation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LoginResponse_Operation_LoginResponse_Operation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LoginResponse_Operation_IsValid(int value);
constexpr LoginResponse_Operation LoginResponse_Operation_Operation_MIN = LoginResponse_Operation_Login;
constexpr LoginResponse_Operation LoginResponse_Operation_Operation_MAX = LoginResponse_Operation_Register;
constexpr int LoginResponse_Operation_Operation_ARRAYSIZE = LoginResponse_Operation_Operation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoginResponse_Operation_descriptor();
template<typename T>
inline const std::string& LoginResponse_Operation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LoginResponse_Operation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LoginResponse_Operation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LoginResponse_Operation_descriptor(), enum_t_value);
}
inline bool LoginResponse_Operation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LoginResponse_Operation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LoginResponse_Operation>(
    LoginResponse_Operation_descriptor(), name, value);
}
enum CharacterData_MoveOpt : int {
  CharacterData_MoveOpt_NONE = 0,
  CharacterData_MoveOpt_UP = 1,
  CharacterData_MoveOpt_DOWN = 2,
  CharacterData_MoveOpt_LEFT = 3,
  CharacterData_MoveOpt_RIGHT = 4,
  CharacterData_MoveOpt_CharacterData_MoveOpt_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CharacterData_MoveOpt_CharacterData_MoveOpt_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CharacterData_MoveOpt_IsValid(int value);
constexpr CharacterData_MoveOpt CharacterData_MoveOpt_MoveOpt_MIN = CharacterData_MoveOpt_NONE;
constexpr CharacterData_MoveOpt CharacterData_MoveOpt_MoveOpt_MAX = CharacterData_MoveOpt_RIGHT;
constexpr int CharacterData_MoveOpt_MoveOpt_ARRAYSIZE = CharacterData_MoveOpt_MoveOpt_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CharacterData_MoveOpt_descriptor();
template<typename T>
inline const std::string& CharacterData_MoveOpt_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CharacterData_MoveOpt>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CharacterData_MoveOpt_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CharacterData_MoveOpt_descriptor(), enum_t_value);
}
inline bool CharacterData_MoveOpt_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CharacterData_MoveOpt* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CharacterData_MoveOpt>(
    CharacterData_MoveOpt_descriptor(), name, value);
}
enum CharacterData_AbilityOpt : int {
  CharacterData_AbilityOpt_None = 0,
  CharacterData_AbilityOpt_Attack = 1,
  CharacterData_AbilityOpt_CharacterData_AbilityOpt_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CharacterData_AbilityOpt_CharacterData_AbilityOpt_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CharacterData_AbilityOpt_IsValid(int value);
constexpr CharacterData_AbilityOpt CharacterData_AbilityOpt_AbilityOpt_MIN = CharacterData_AbilityOpt_None;
constexpr CharacterData_AbilityOpt CharacterData_AbilityOpt_AbilityOpt_MAX = CharacterData_AbilityOpt_Attack;
constexpr int CharacterData_AbilityOpt_AbilityOpt_ARRAYSIZE = CharacterData_AbilityOpt_AbilityOpt_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CharacterData_AbilityOpt_descriptor();
template<typename T>
inline const std::string& CharacterData_AbilityOpt_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CharacterData_AbilityOpt>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CharacterData_AbilityOpt_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CharacterData_AbilityOpt_descriptor(), enum_t_value);
}
inline bool CharacterData_AbilityOpt_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CharacterData_AbilityOpt* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CharacterData_AbilityOpt>(
    CharacterData_AbilityOpt_descriptor(), name, value);
}
enum UserMoney_Operation : int {
  UserMoney_Operation_Get = 0,
  UserMoney_Operation_Add = 1,
  UserMoney_Operation_Sub = 2,
  UserMoney_Operation_UserMoney_Operation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  UserMoney_Operation_UserMoney_Operation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool UserMoney_Operation_IsValid(int value);
constexpr UserMoney_Operation UserMoney_Operation_Operation_MIN = UserMoney_Operation_Get;
constexpr UserMoney_Operation UserMoney_Operation_Operation_MAX = UserMoney_Operation_Sub;
constexpr int UserMoney_Operation_Operation_ARRAYSIZE = UserMoney_Operation_Operation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserMoney_Operation_descriptor();
template<typename T>
inline const std::string& UserMoney_Operation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserMoney_Operation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserMoney_Operation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UserMoney_Operation_descriptor(), enum_t_value);
}
inline bool UserMoney_Operation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UserMoney_Operation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UserMoney_Operation>(
    UserMoney_Operation_descriptor(), name, value);
}
enum ServerInfo_Operation : int {
  ServerInfo_Operation_Register = 0,
  ServerInfo_Operation_RequstAssgin = 1,
  ServerInfo_Operation_Connect = 2,
  ServerInfo_Operation_ServerInfo_Operation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ServerInfo_Operation_ServerInfo_Operation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ServerInfo_Operation_IsValid(int value);
constexpr ServerInfo_Operation ServerInfo_Operation_Operation_MIN = ServerInfo_Operation_Register;
constexpr ServerInfo_Operation ServerInfo_Operation_Operation_MAX = ServerInfo_Operation_Connect;
constexpr int ServerInfo_Operation_Operation_ARRAYSIZE = ServerInfo_Operation_Operation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerInfo_Operation_descriptor();
template<typename T>
inline const std::string& ServerInfo_Operation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServerInfo_Operation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServerInfo_Operation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServerInfo_Operation_descriptor(), enum_t_value);
}
inline bool ServerInfo_Operation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServerInfo_Operation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServerInfo_Operation>(
    ServerInfo_Operation_descriptor(), name, value);
}
// ===================================================================

class LoginData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Net.LoginData) */ {
 public:
  inline LoginData() : LoginData(nullptr) {}
  ~LoginData() override;
  explicit constexpr LoginData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginData(const LoginData& from);
  LoginData(LoginData&& from) noexcept
    : LoginData() {
    *this = ::std::move(from);
  }

  inline LoginData& operator=(const LoginData& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginData& operator=(LoginData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginData& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginData* internal_default_instance() {
    return reinterpret_cast<const LoginData*>(
               &_LoginData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LoginData& a, LoginData& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoginData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Net.LoginData";
  }
  protected:
  explicit LoginData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LoginData_Operation Operation;
  static constexpr Operation Login =
    LoginData_Operation_Login;
  static constexpr Operation Register =
    LoginData_Operation_Register;
  static inline bool Operation_IsValid(int value) {
    return LoginData_Operation_IsValid(value);
  }
  static constexpr Operation Operation_MIN =
    LoginData_Operation_Operation_MIN;
  static constexpr Operation Operation_MAX =
    LoginData_Operation_Operation_MAX;
  static constexpr int Operation_ARRAYSIZE =
    LoginData_Operation_Operation_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Operation_descriptor() {
    return LoginData_Operation_descriptor();
  }
  template<typename T>
  static inline const std::string& Operation_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Operation>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Operation_Name.");
    return LoginData_Operation_Name(enum_t_value);
  }
  static inline bool Operation_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Operation* value) {
    return LoginData_Operation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPasswdFieldNumber = 2,
    kOptFieldNumber = 3,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string passwd = 2;
  void clear_passwd();
  const std::string& passwd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_passwd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_passwd();
  PROTOBUF_NODISCARD std::string* release_passwd();
  void set_allocated_passwd(std::string* passwd);
  private:
  const std::string& _internal_passwd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_passwd(const std::string& value);
  std::string* _internal_mutable_passwd();
  public:

  // .Net.LoginData.Operation opt = 3;
  void clear_opt();
  ::Net::LoginData_Operation opt() const;
  void set_opt(::Net::LoginData_Operation value);
  private:
  ::Net::LoginData_Operation _internal_opt() const;
  void _internal_set_opt(::Net::LoginData_Operation value);
  public:

  // @@protoc_insertion_point(class_scope:Net.LoginData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr passwd_;
  int opt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NetworkData_2eproto;
};
// -------------------------------------------------------------------

class LoginResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Net.LoginResponse) */ {
 public:
  inline LoginResponse() : LoginResponse(nullptr) {}
  ~LoginResponse() override;
  explicit constexpr LoginResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginResponse(const LoginResponse& from);
  LoginResponse(LoginResponse&& from) noexcept
    : LoginResponse() {
    *this = ::std::move(from);
  }

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginResponse& operator=(LoginResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginResponse* internal_default_instance() {
    return reinterpret_cast<const LoginResponse*>(
               &_LoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LoginResponse& a, LoginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoginResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Net.LoginResponse";
  }
  protected:
  explicit LoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LoginResponse_Operation Operation;
  static constexpr Operation Login =
    LoginResponse_Operation_Login;
  static constexpr Operation Register =
    LoginResponse_Operation_Register;
  static inline bool Operation_IsValid(int value) {
    return LoginResponse_Operation_IsValid(value);
  }
  static constexpr Operation Operation_MIN =
    LoginResponse_Operation_Operation_MIN;
  static constexpr Operation Operation_MAX =
    LoginResponse_Operation_Operation_MAX;
  static constexpr int Operation_ARRAYSIZE =
    LoginResponse_Operation_Operation_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Operation_descriptor() {
    return LoginResponse_Operation_descriptor();
  }
  template<typename T>
  static inline const std::string& Operation_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Operation>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Operation_Name.");
    return LoginResponse_Operation_Name(enum_t_value);
  }
  static inline bool Operation_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Operation* value) {
    return LoginResponse_Operation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kUseridFieldNumber = 3,
    kResultFieldNumber = 1,
    kTokenFieldNumber = 4,
    kOptFieldNumber = 5,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string userid = 3;
  void clear_userid();
  const std::string& userid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_userid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // uint32 token = 4;
  void clear_token();
  uint32_t token() const;
  void set_token(uint32_t value);
  private:
  uint32_t _internal_token() const;
  void _internal_set_token(uint32_t value);
  public:

  // .Net.LoginResponse.Operation opt = 5;
  void clear_opt();
  ::Net::LoginResponse_Operation opt() const;
  void set_opt(::Net::LoginResponse_Operation value);
  private:
  ::Net::LoginResponse_Operation _internal_opt() const;
  void _internal_set_opt(::Net::LoginResponse_Operation value);
  public:

  // @@protoc_insertion_point(class_scope:Net.LoginResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  bool result_;
  uint32_t token_;
  int opt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NetworkData_2eproto;
};
// -------------------------------------------------------------------

class CharacterData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Net.CharacterData) */ {
 public:
  inline CharacterData() : CharacterData(nullptr) {}
  ~CharacterData() override;
  explicit constexpr CharacterData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CharacterData(const CharacterData& from);
  CharacterData(CharacterData&& from) noexcept
    : CharacterData() {
    *this = ::std::move(from);
  }

  inline CharacterData& operator=(const CharacterData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterData& operator=(CharacterData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterData* internal_default_instance() {
    return reinterpret_cast<const CharacterData*>(
               &_CharacterData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CharacterData& a, CharacterData& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CharacterData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CharacterData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CharacterData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CharacterData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharacterData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Net.CharacterData";
  }
  protected:
  explicit CharacterData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CharacterData_MoveOpt MoveOpt;
  static constexpr MoveOpt NONE =
    CharacterData_MoveOpt_NONE;
  static constexpr MoveOpt UP =
    CharacterData_MoveOpt_UP;
  static constexpr MoveOpt DOWN =
    CharacterData_MoveOpt_DOWN;
  static constexpr MoveOpt LEFT =
    CharacterData_MoveOpt_LEFT;
  static constexpr MoveOpt RIGHT =
    CharacterData_MoveOpt_RIGHT;
  static inline bool MoveOpt_IsValid(int value) {
    return CharacterData_MoveOpt_IsValid(value);
  }
  static constexpr MoveOpt MoveOpt_MIN =
    CharacterData_MoveOpt_MoveOpt_MIN;
  static constexpr MoveOpt MoveOpt_MAX =
    CharacterData_MoveOpt_MoveOpt_MAX;
  static constexpr int MoveOpt_ARRAYSIZE =
    CharacterData_MoveOpt_MoveOpt_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MoveOpt_descriptor() {
    return CharacterData_MoveOpt_descriptor();
  }
  template<typename T>
  static inline const std::string& MoveOpt_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MoveOpt>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MoveOpt_Name.");
    return CharacterData_MoveOpt_Name(enum_t_value);
  }
  static inline bool MoveOpt_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MoveOpt* value) {
    return CharacterData_MoveOpt_Parse(name, value);
  }

  typedef CharacterData_AbilityOpt AbilityOpt;
  static constexpr AbilityOpt None =
    CharacterData_AbilityOpt_None;
  static constexpr AbilityOpt Attack =
    CharacterData_AbilityOpt_Attack;
  static inline bool AbilityOpt_IsValid(int value) {
    return CharacterData_AbilityOpt_IsValid(value);
  }
  static constexpr AbilityOpt AbilityOpt_MIN =
    CharacterData_AbilityOpt_AbilityOpt_MIN;
  static constexpr AbilityOpt AbilityOpt_MAX =
    CharacterData_AbilityOpt_AbilityOpt_MAX;
  static constexpr int AbilityOpt_ARRAYSIZE =
    CharacterData_AbilityOpt_AbilityOpt_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AbilityOpt_descriptor() {
    return CharacterData_AbilityOpt_descriptor();
  }
  template<typename T>
  static inline const std::string& AbilityOpt_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AbilityOpt>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AbilityOpt_Name.");
    return CharacterData_AbilityOpt_Name(enum_t_value);
  }
  static inline bool AbilityOpt_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AbilityOpt* value) {
    return CharacterData_AbilityOpt_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 3,
    kMoveFieldNumber = 1,
    kSkillFieldNumber = 2,
  };
  // string userid = 3;
  void clear_userid();
  const std::string& userid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_userid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // .Net.CharacterData.MoveOpt move = 1;
  void clear_move();
  ::Net::CharacterData_MoveOpt move() const;
  void set_move(::Net::CharacterData_MoveOpt value);
  private:
  ::Net::CharacterData_MoveOpt _internal_move() const;
  void _internal_set_move(::Net::CharacterData_MoveOpt value);
  public:

  // .Net.CharacterData.AbilityOpt Skill = 2;
  void clear_skill();
  ::Net::CharacterData_AbilityOpt skill() const;
  void set_skill(::Net::CharacterData_AbilityOpt value);
  private:
  ::Net::CharacterData_AbilityOpt _internal_skill() const;
  void _internal_set_skill(::Net::CharacterData_AbilityOpt value);
  public:

  // @@protoc_insertion_point(class_scope:Net.CharacterData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  int move_;
  int skill_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NetworkData_2eproto;
};
// -------------------------------------------------------------------

class UserMoney final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Net.UserMoney) */ {
 public:
  inline UserMoney() : UserMoney(nullptr) {}
  ~UserMoney() override;
  explicit constexpr UserMoney(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserMoney(const UserMoney& from);
  UserMoney(UserMoney&& from) noexcept
    : UserMoney() {
    *this = ::std::move(from);
  }

  inline UserMoney& operator=(const UserMoney& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserMoney& operator=(UserMoney&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserMoney& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserMoney* internal_default_instance() {
    return reinterpret_cast<const UserMoney*>(
               &_UserMoney_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UserMoney& a, UserMoney& b) {
    a.Swap(&b);
  }
  inline void Swap(UserMoney* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserMoney* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserMoney* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserMoney>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserMoney& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserMoney& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserMoney* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Net.UserMoney";
  }
  protected:
  explicit UserMoney(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UserMoney_Operation Operation;
  static constexpr Operation Get =
    UserMoney_Operation_Get;
  static constexpr Operation Add =
    UserMoney_Operation_Add;
  static constexpr Operation Sub =
    UserMoney_Operation_Sub;
  static inline bool Operation_IsValid(int value) {
    return UserMoney_Operation_IsValid(value);
  }
  static constexpr Operation Operation_MIN =
    UserMoney_Operation_Operation_MIN;
  static constexpr Operation Operation_MAX =
    UserMoney_Operation_Operation_MAX;
  static constexpr int Operation_ARRAYSIZE =
    UserMoney_Operation_Operation_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Operation_descriptor() {
    return UserMoney_Operation_descriptor();
  }
  template<typename T>
  static inline const std::string& Operation_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Operation>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Operation_Name.");
    return UserMoney_Operation_Name(enum_t_value);
  }
  static inline bool Operation_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Operation* value) {
    return UserMoney_Operation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 1,
    kMoneyFieldNumber = 2,
    kOptFieldNumber = 3,
  };
  // string userid = 1;
  void clear_userid();
  const std::string& userid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_userid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // int32 money = 2;
  void clear_money();
  int32_t money() const;
  void set_money(int32_t value);
  private:
  int32_t _internal_money() const;
  void _internal_set_money(int32_t value);
  public:

  // .Net.UserMoney.Operation opt = 3;
  void clear_opt();
  ::Net::UserMoney_Operation opt() const;
  void set_opt(::Net::UserMoney_Operation value);
  private:
  ::Net::UserMoney_Operation _internal_opt() const;
  void _internal_set_opt(::Net::UserMoney_Operation value);
  public:

  // @@protoc_insertion_point(class_scope:Net.UserMoney)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  int32_t money_;
  int opt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NetworkData_2eproto;
};
// -------------------------------------------------------------------

class LoginOut final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Net.LoginOut) */ {
 public:
  inline LoginOut() : LoginOut(nullptr) {}
  ~LoginOut() override;
  explicit constexpr LoginOut(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginOut(const LoginOut& from);
  LoginOut(LoginOut&& from) noexcept
    : LoginOut() {
    *this = ::std::move(from);
  }

  inline LoginOut& operator=(const LoginOut& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginOut& operator=(LoginOut&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginOut& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginOut* internal_default_instance() {
    return reinterpret_cast<const LoginOut*>(
               &_LoginOut_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LoginOut& a, LoginOut& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginOut* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginOut* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginOut* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginOut>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginOut& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoginOut& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginOut* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Net.LoginOut";
  }
  protected:
  explicit LoginOut(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 1,
    kReasonFieldNumber = 2,
  };
  // string userid = 1;
  void clear_userid();
  const std::string& userid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_userid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // string reason = 2;
  void clear_reason();
  const std::string& reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // @@protoc_insertion_point(class_scope:Net.LoginOut)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NetworkData_2eproto;
};
// -------------------------------------------------------------------

class GameState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Net.GameState) */ {
 public:
  inline GameState() : GameState(nullptr) {}
  ~GameState() override;
  explicit constexpr GameState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameState(const GameState& from);
  GameState(GameState&& from) noexcept
    : GameState() {
    *this = ::std::move(from);
  }

  inline GameState& operator=(const GameState& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameState& operator=(GameState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameState& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameState* internal_default_instance() {
    return reinterpret_cast<const GameState*>(
               &_GameState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GameState& a, GameState& b) {
    a.Swap(&b);
  }
  inline void Swap(GameState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GameState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Net.GameState";
  }
  protected:
  explicit GameState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBGameStartFieldNumber = 1,
  };
  // int32 bGameStart = 1;
  void clear_bgamestart();
  int32_t bgamestart() const;
  void set_bgamestart(int32_t value);
  private:
  int32_t _internal_bgamestart() const;
  void _internal_set_bgamestart(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Net.GameState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t bgamestart_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NetworkData_2eproto;
};
// -------------------------------------------------------------------

class Frame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Net.Frame) */ {
 public:
  inline Frame() : Frame(nullptr) {}
  ~Frame() override;
  explicit constexpr Frame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Frame(const Frame& from);
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frame& operator=(Frame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Frame& default_instance() {
    return *internal_default_instance();
  }
  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }
  inline void Swap(Frame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Frame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Frame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Frame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Frame& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Net.Frame";
  }
  protected:
  explicit Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
  };
  // int64 time = 1;
  void clear_time();
  int64_t time() const;
  void set_time(int64_t value);
  private:
  int64_t _internal_time() const;
  void _internal_set_time(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Net.Frame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NetworkData_2eproto;
};
// -------------------------------------------------------------------

class HashString final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Net.HashString) */ {
 public:
  inline HashString() : HashString(nullptr) {}
  ~HashString() override;
  explicit constexpr HashString(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HashString(const HashString& from);
  HashString(HashString&& from) noexcept
    : HashString() {
    *this = ::std::move(from);
  }

  inline HashString& operator=(const HashString& from) {
    CopyFrom(from);
    return *this;
  }
  inline HashString& operator=(HashString&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HashString& default_instance() {
    return *internal_default_instance();
  }
  static inline const HashString* internal_default_instance() {
    return reinterpret_cast<const HashString*>(
               &_HashString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(HashString& a, HashString& b) {
    a.Swap(&b);
  }
  inline void Swap(HashString* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HashString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HashString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HashString>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HashString& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HashString& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HashString* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Net.HashString";
  }
  protected:
  explicit HashString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 2,
    kFrameFieldNumber = 1,
  };
  // string hash = 2;
  void clear_hash();
  const std::string& hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // int32 frame = 1;
  void clear_frame();
  int32_t frame() const;
  void set_frame(int32_t value);
  private:
  int32_t _internal_frame() const;
  void _internal_set_frame(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Net.HashString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  int32_t frame_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NetworkData_2eproto;
};
// -------------------------------------------------------------------

class ServerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Net.ServerInfo) */ {
 public:
  inline ServerInfo() : ServerInfo(nullptr) {}
  ~ServerInfo() override;
  explicit constexpr ServerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerInfo(const ServerInfo& from);
  ServerInfo(ServerInfo&& from) noexcept
    : ServerInfo() {
    *this = ::std::move(from);
  }

  inline ServerInfo& operator=(const ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerInfo& operator=(ServerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerInfo* internal_default_instance() {
    return reinterpret_cast<const ServerInfo*>(
               &_ServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ServerInfo& a, ServerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ServerInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Net.ServerInfo";
  }
  protected:
  explicit ServerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ServerInfo_Operation Operation;
  static constexpr Operation Register =
    ServerInfo_Operation_Register;
  static constexpr Operation RequstAssgin =
    ServerInfo_Operation_RequstAssgin;
  static constexpr Operation Connect =
    ServerInfo_Operation_Connect;
  static inline bool Operation_IsValid(int value) {
    return ServerInfo_Operation_IsValid(value);
  }
  static constexpr Operation Operation_MIN =
    ServerInfo_Operation_Operation_MIN;
  static constexpr Operation Operation_MAX =
    ServerInfo_Operation_Operation_MAX;
  static constexpr int Operation_ARRAYSIZE =
    ServerInfo_Operation_Operation_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Operation_descriptor() {
    return ServerInfo_Operation_descriptor();
  }
  template<typename T>
  static inline const std::string& Operation_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Operation>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Operation_Name.");
    return ServerInfo_Operation_Name(enum_t_value);
  }
  static inline bool Operation_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Operation* value) {
    return ServerInfo_Operation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kPortFieldNumber = 2,
    kServerFreeLevelFieldNumber = 3,
    kServerTypeFieldNumber = 4,
    kOptFieldNumber = 5,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // int32 port = 2;
  void clear_port();
  int32_t port() const;
  void set_port(int32_t value);
  private:
  int32_t _internal_port() const;
  void _internal_set_port(int32_t value);
  public:

  // int32 server_free_level = 3;
  void clear_server_free_level();
  int32_t server_free_level() const;
  void set_server_free_level(int32_t value);
  private:
  int32_t _internal_server_free_level() const;
  void _internal_set_server_free_level(int32_t value);
  public:

  // int32 server_type = 4;
  void clear_server_type();
  int32_t server_type() const;
  void set_server_type(int32_t value);
  private:
  int32_t _internal_server_type() const;
  void _internal_set_server_type(int32_t value);
  public:

  // .Net.ServerInfo.Operation opt = 5;
  void clear_opt();
  ::Net::ServerInfo_Operation opt() const;
  void set_opt(::Net::ServerInfo_Operation value);
  private:
  ::Net::ServerInfo_Operation _internal_opt() const;
  void _internal_set_opt(::Net::ServerInfo_Operation value);
  public:

  // @@protoc_insertion_point(class_scope:Net.ServerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  int32_t port_;
  int32_t server_free_level_;
  int32_t server_type_;
  int opt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NetworkData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoginData

// string username = 1;
inline void LoginData::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& LoginData::username() const {
  // @@protoc_insertion_point(field_get:Net.LoginData.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginData::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Net.LoginData.username)
}
inline std::string* LoginData::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:Net.LoginData.username)
  return _s;
}
inline const std::string& LoginData::_internal_username() const {
  return username_.Get();
}
inline void LoginData::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoginData::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoginData::release_username() {
  // @@protoc_insertion_point(field_release:Net.LoginData.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoginData::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Net.LoginData.username)
}

// string passwd = 2;
inline void LoginData::clear_passwd() {
  passwd_.ClearToEmpty();
}
inline const std::string& LoginData::passwd() const {
  // @@protoc_insertion_point(field_get:Net.LoginData.passwd)
  return _internal_passwd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginData::set_passwd(ArgT0&& arg0, ArgT... args) {
 
 passwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Net.LoginData.passwd)
}
inline std::string* LoginData::mutable_passwd() {
  std::string* _s = _internal_mutable_passwd();
  // @@protoc_insertion_point(field_mutable:Net.LoginData.passwd)
  return _s;
}
inline const std::string& LoginData::_internal_passwd() const {
  return passwd_.Get();
}
inline void LoginData::_internal_set_passwd(const std::string& value) {
  
  passwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoginData::_internal_mutable_passwd() {
  
  return passwd_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoginData::release_passwd() {
  // @@protoc_insertion_point(field_release:Net.LoginData.passwd)
  return passwd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoginData::set_allocated_passwd(std::string* passwd) {
  if (passwd != nullptr) {
    
  } else {
    
  }
  passwd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), passwd,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (passwd_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    passwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Net.LoginData.passwd)
}

// .Net.LoginData.Operation opt = 3;
inline void LoginData::clear_opt() {
  opt_ = 0;
}
inline ::Net::LoginData_Operation LoginData::_internal_opt() const {
  return static_cast< ::Net::LoginData_Operation >(opt_);
}
inline ::Net::LoginData_Operation LoginData::opt() const {
  // @@protoc_insertion_point(field_get:Net.LoginData.opt)
  return _internal_opt();
}
inline void LoginData::_internal_set_opt(::Net::LoginData_Operation value) {
  
  opt_ = value;
}
inline void LoginData::set_opt(::Net::LoginData_Operation value) {
  _internal_set_opt(value);
  // @@protoc_insertion_point(field_set:Net.LoginData.opt)
}

// -------------------------------------------------------------------

// LoginResponse

// bool result = 1;
inline void LoginResponse::clear_result() {
  result_ = false;
}
inline bool LoginResponse::_internal_result() const {
  return result_;
}
inline bool LoginResponse::result() const {
  // @@protoc_insertion_point(field_get:Net.LoginResponse.result)
  return _internal_result();
}
inline void LoginResponse::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void LoginResponse::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:Net.LoginResponse.result)
}

// string msg = 2;
inline void LoginResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& LoginResponse::msg() const {
  // @@protoc_insertion_point(field_get:Net.LoginResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Net.LoginResponse.msg)
}
inline std::string* LoginResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:Net.LoginResponse.msg)
  return _s;
}
inline const std::string& LoginResponse::_internal_msg() const {
  return msg_.Get();
}
inline void LoginResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoginResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoginResponse::release_msg() {
  // @@protoc_insertion_point(field_release:Net.LoginResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoginResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (msg_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Net.LoginResponse.msg)
}

// string userid = 3;
inline void LoginResponse::clear_userid() {
  userid_.ClearToEmpty();
}
inline const std::string& LoginResponse::userid() const {
  // @@protoc_insertion_point(field_get:Net.LoginResponse.userid)
  return _internal_userid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginResponse::set_userid(ArgT0&& arg0, ArgT... args) {
 
 userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Net.LoginResponse.userid)
}
inline std::string* LoginResponse::mutable_userid() {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:Net.LoginResponse.userid)
  return _s;
}
inline const std::string& LoginResponse::_internal_userid() const {
  return userid_.Get();
}
inline void LoginResponse::_internal_set_userid(const std::string& value) {
  
  userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoginResponse::_internal_mutable_userid() {
  
  return userid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoginResponse::release_userid() {
  // @@protoc_insertion_point(field_release:Net.LoginResponse.userid)
  return userid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoginResponse::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (userid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Net.LoginResponse.userid)
}

// uint32 token = 4;
inline void LoginResponse::clear_token() {
  token_ = 0u;
}
inline uint32_t LoginResponse::_internal_token() const {
  return token_;
}
inline uint32_t LoginResponse::token() const {
  // @@protoc_insertion_point(field_get:Net.LoginResponse.token)
  return _internal_token();
}
inline void LoginResponse::_internal_set_token(uint32_t value) {
  
  token_ = value;
}
inline void LoginResponse::set_token(uint32_t value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:Net.LoginResponse.token)
}

// .Net.LoginResponse.Operation opt = 5;
inline void LoginResponse::clear_opt() {
  opt_ = 0;
}
inline ::Net::LoginResponse_Operation LoginResponse::_internal_opt() const {
  return static_cast< ::Net::LoginResponse_Operation >(opt_);
}
inline ::Net::LoginResponse_Operation LoginResponse::opt() const {
  // @@protoc_insertion_point(field_get:Net.LoginResponse.opt)
  return _internal_opt();
}
inline void LoginResponse::_internal_set_opt(::Net::LoginResponse_Operation value) {
  
  opt_ = value;
}
inline void LoginResponse::set_opt(::Net::LoginResponse_Operation value) {
  _internal_set_opt(value);
  // @@protoc_insertion_point(field_set:Net.LoginResponse.opt)
}

// -------------------------------------------------------------------

// CharacterData

// .Net.CharacterData.MoveOpt move = 1;
inline void CharacterData::clear_move() {
  move_ = 0;
}
inline ::Net::CharacterData_MoveOpt CharacterData::_internal_move() const {
  return static_cast< ::Net::CharacterData_MoveOpt >(move_);
}
inline ::Net::CharacterData_MoveOpt CharacterData::move() const {
  // @@protoc_insertion_point(field_get:Net.CharacterData.move)
  return _internal_move();
}
inline void CharacterData::_internal_set_move(::Net::CharacterData_MoveOpt value) {
  
  move_ = value;
}
inline void CharacterData::set_move(::Net::CharacterData_MoveOpt value) {
  _internal_set_move(value);
  // @@protoc_insertion_point(field_set:Net.CharacterData.move)
}

// .Net.CharacterData.AbilityOpt Skill = 2;
inline void CharacterData::clear_skill() {
  skill_ = 0;
}
inline ::Net::CharacterData_AbilityOpt CharacterData::_internal_skill() const {
  return static_cast< ::Net::CharacterData_AbilityOpt >(skill_);
}
inline ::Net::CharacterData_AbilityOpt CharacterData::skill() const {
  // @@protoc_insertion_point(field_get:Net.CharacterData.Skill)
  return _internal_skill();
}
inline void CharacterData::_internal_set_skill(::Net::CharacterData_AbilityOpt value) {
  
  skill_ = value;
}
inline void CharacterData::set_skill(::Net::CharacterData_AbilityOpt value) {
  _internal_set_skill(value);
  // @@protoc_insertion_point(field_set:Net.CharacterData.Skill)
}

// string userid = 3;
inline void CharacterData::clear_userid() {
  userid_.ClearToEmpty();
}
inline const std::string& CharacterData::userid() const {
  // @@protoc_insertion_point(field_get:Net.CharacterData.userid)
  return _internal_userid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CharacterData::set_userid(ArgT0&& arg0, ArgT... args) {
 
 userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Net.CharacterData.userid)
}
inline std::string* CharacterData::mutable_userid() {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:Net.CharacterData.userid)
  return _s;
}
inline const std::string& CharacterData::_internal_userid() const {
  return userid_.Get();
}
inline void CharacterData::_internal_set_userid(const std::string& value) {
  
  userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CharacterData::_internal_mutable_userid() {
  
  return userid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CharacterData::release_userid() {
  // @@protoc_insertion_point(field_release:Net.CharacterData.userid)
  return userid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CharacterData::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (userid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Net.CharacterData.userid)
}

// -------------------------------------------------------------------

// UserMoney

// string userid = 1;
inline void UserMoney::clear_userid() {
  userid_.ClearToEmpty();
}
inline const std::string& UserMoney::userid() const {
  // @@protoc_insertion_point(field_get:Net.UserMoney.userid)
  return _internal_userid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserMoney::set_userid(ArgT0&& arg0, ArgT... args) {
 
 userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Net.UserMoney.userid)
}
inline std::string* UserMoney::mutable_userid() {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:Net.UserMoney.userid)
  return _s;
}
inline const std::string& UserMoney::_internal_userid() const {
  return userid_.Get();
}
inline void UserMoney::_internal_set_userid(const std::string& value) {
  
  userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserMoney::_internal_mutable_userid() {
  
  return userid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserMoney::release_userid() {
  // @@protoc_insertion_point(field_release:Net.UserMoney.userid)
  return userid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserMoney::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (userid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Net.UserMoney.userid)
}

// int32 money = 2;
inline void UserMoney::clear_money() {
  money_ = 0;
}
inline int32_t UserMoney::_internal_money() const {
  return money_;
}
inline int32_t UserMoney::money() const {
  // @@protoc_insertion_point(field_get:Net.UserMoney.money)
  return _internal_money();
}
inline void UserMoney::_internal_set_money(int32_t value) {
  
  money_ = value;
}
inline void UserMoney::set_money(int32_t value) {
  _internal_set_money(value);
  // @@protoc_insertion_point(field_set:Net.UserMoney.money)
}

// .Net.UserMoney.Operation opt = 3;
inline void UserMoney::clear_opt() {
  opt_ = 0;
}
inline ::Net::UserMoney_Operation UserMoney::_internal_opt() const {
  return static_cast< ::Net::UserMoney_Operation >(opt_);
}
inline ::Net::UserMoney_Operation UserMoney::opt() const {
  // @@protoc_insertion_point(field_get:Net.UserMoney.opt)
  return _internal_opt();
}
inline void UserMoney::_internal_set_opt(::Net::UserMoney_Operation value) {
  
  opt_ = value;
}
inline void UserMoney::set_opt(::Net::UserMoney_Operation value) {
  _internal_set_opt(value);
  // @@protoc_insertion_point(field_set:Net.UserMoney.opt)
}

// -------------------------------------------------------------------

// LoginOut

// string userid = 1;
inline void LoginOut::clear_userid() {
  userid_.ClearToEmpty();
}
inline const std::string& LoginOut::userid() const {
  // @@protoc_insertion_point(field_get:Net.LoginOut.userid)
  return _internal_userid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginOut::set_userid(ArgT0&& arg0, ArgT... args) {
 
 userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Net.LoginOut.userid)
}
inline std::string* LoginOut::mutable_userid() {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:Net.LoginOut.userid)
  return _s;
}
inline const std::string& LoginOut::_internal_userid() const {
  return userid_.Get();
}
inline void LoginOut::_internal_set_userid(const std::string& value) {
  
  userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoginOut::_internal_mutable_userid() {
  
  return userid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoginOut::release_userid() {
  // @@protoc_insertion_point(field_release:Net.LoginOut.userid)
  return userid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoginOut::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (userid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Net.LoginOut.userid)
}

// string reason = 2;
inline void LoginOut::clear_reason() {
  reason_.ClearToEmpty();
}
inline const std::string& LoginOut::reason() const {
  // @@protoc_insertion_point(field_get:Net.LoginOut.reason)
  return _internal_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginOut::set_reason(ArgT0&& arg0, ArgT... args) {
 
 reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Net.LoginOut.reason)
}
inline std::string* LoginOut::mutable_reason() {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:Net.LoginOut.reason)
  return _s;
}
inline const std::string& LoginOut::_internal_reason() const {
  return reason_.Get();
}
inline void LoginOut::_internal_set_reason(const std::string& value) {
  
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoginOut::_internal_mutable_reason() {
  
  return reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoginOut::release_reason() {
  // @@protoc_insertion_point(field_release:Net.LoginOut.reason)
  return reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoginOut::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reason_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Net.LoginOut.reason)
}

// -------------------------------------------------------------------

// GameState

// int32 bGameStart = 1;
inline void GameState::clear_bgamestart() {
  bgamestart_ = 0;
}
inline int32_t GameState::_internal_bgamestart() const {
  return bgamestart_;
}
inline int32_t GameState::bgamestart() const {
  // @@protoc_insertion_point(field_get:Net.GameState.bGameStart)
  return _internal_bgamestart();
}
inline void GameState::_internal_set_bgamestart(int32_t value) {
  
  bgamestart_ = value;
}
inline void GameState::set_bgamestart(int32_t value) {
  _internal_set_bgamestart(value);
  // @@protoc_insertion_point(field_set:Net.GameState.bGameStart)
}

// -------------------------------------------------------------------

// Frame

// int64 time = 1;
inline void Frame::clear_time() {
  time_ = int64_t{0};
}
inline int64_t Frame::_internal_time() const {
  return time_;
}
inline int64_t Frame::time() const {
  // @@protoc_insertion_point(field_get:Net.Frame.time)
  return _internal_time();
}
inline void Frame::_internal_set_time(int64_t value) {
  
  time_ = value;
}
inline void Frame::set_time(int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:Net.Frame.time)
}

// -------------------------------------------------------------------

// HashString

// int32 frame = 1;
inline void HashString::clear_frame() {
  frame_ = 0;
}
inline int32_t HashString::_internal_frame() const {
  return frame_;
}
inline int32_t HashString::frame() const {
  // @@protoc_insertion_point(field_get:Net.HashString.frame)
  return _internal_frame();
}
inline void HashString::_internal_set_frame(int32_t value) {
  
  frame_ = value;
}
inline void HashString::set_frame(int32_t value) {
  _internal_set_frame(value);
  // @@protoc_insertion_point(field_set:Net.HashString.frame)
}

// string hash = 2;
inline void HashString::clear_hash() {
  hash_.ClearToEmpty();
}
inline const std::string& HashString::hash() const {
  // @@protoc_insertion_point(field_get:Net.HashString.hash)
  return _internal_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HashString::set_hash(ArgT0&& arg0, ArgT... args) {
 
 hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Net.HashString.hash)
}
inline std::string* HashString::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:Net.HashString.hash)
  return _s;
}
inline const std::string& HashString::_internal_hash() const {
  return hash_.Get();
}
inline void HashString::_internal_set_hash(const std::string& value) {
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* HashString::_internal_mutable_hash() {
  
  return hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* HashString::release_hash() {
  // @@protoc_insertion_point(field_release:Net.HashString.hash)
  return hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void HashString::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Net.HashString.hash)
}

// -------------------------------------------------------------------

// ServerInfo

// string ip = 1;
inline void ServerInfo::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& ServerInfo::ip() const {
  // @@protoc_insertion_point(field_get:Net.ServerInfo.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerInfo::set_ip(ArgT0&& arg0, ArgT... args) {
 
 ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Net.ServerInfo.ip)
}
inline std::string* ServerInfo::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:Net.ServerInfo.ip)
  return _s;
}
inline const std::string& ServerInfo::_internal_ip() const {
  return ip_.Get();
}
inline void ServerInfo::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ServerInfo::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ServerInfo::release_ip() {
  // @@protoc_insertion_point(field_release:Net.ServerInfo.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ServerInfo::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ip_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Net.ServerInfo.ip)
}

// int32 port = 2;
inline void ServerInfo::clear_port() {
  port_ = 0;
}
inline int32_t ServerInfo::_internal_port() const {
  return port_;
}
inline int32_t ServerInfo::port() const {
  // @@protoc_insertion_point(field_get:Net.ServerInfo.port)
  return _internal_port();
}
inline void ServerInfo::_internal_set_port(int32_t value) {
  
  port_ = value;
}
inline void ServerInfo::set_port(int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:Net.ServerInfo.port)
}

// int32 server_free_level = 3;
inline void ServerInfo::clear_server_free_level() {
  server_free_level_ = 0;
}
inline int32_t ServerInfo::_internal_server_free_level() const {
  return server_free_level_;
}
inline int32_t ServerInfo::server_free_level() const {
  // @@protoc_insertion_point(field_get:Net.ServerInfo.server_free_level)
  return _internal_server_free_level();
}
inline void ServerInfo::_internal_set_server_free_level(int32_t value) {
  
  server_free_level_ = value;
}
inline void ServerInfo::set_server_free_level(int32_t value) {
  _internal_set_server_free_level(value);
  // @@protoc_insertion_point(field_set:Net.ServerInfo.server_free_level)
}

// int32 server_type = 4;
inline void ServerInfo::clear_server_type() {
  server_type_ = 0;
}
inline int32_t ServerInfo::_internal_server_type() const {
  return server_type_;
}
inline int32_t ServerInfo::server_type() const {
  // @@protoc_insertion_point(field_get:Net.ServerInfo.server_type)
  return _internal_server_type();
}
inline void ServerInfo::_internal_set_server_type(int32_t value) {
  
  server_type_ = value;
}
inline void ServerInfo::set_server_type(int32_t value) {
  _internal_set_server_type(value);
  // @@protoc_insertion_point(field_set:Net.ServerInfo.server_type)
}

// .Net.ServerInfo.Operation opt = 5;
inline void ServerInfo::clear_opt() {
  opt_ = 0;
}
inline ::Net::ServerInfo_Operation ServerInfo::_internal_opt() const {
  return static_cast< ::Net::ServerInfo_Operation >(opt_);
}
inline ::Net::ServerInfo_Operation ServerInfo::opt() const {
  // @@protoc_insertion_point(field_get:Net.ServerInfo.opt)
  return _internal_opt();
}
inline void ServerInfo::_internal_set_opt(::Net::ServerInfo_Operation value) {
  
  opt_ = value;
}
inline void ServerInfo::set_opt(::Net::ServerInfo_Operation value) {
  _internal_set_opt(value);
  // @@protoc_insertion_point(field_set:Net.ServerInfo.opt)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Net

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Net::LoginData_Operation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Net::LoginData_Operation>() {
  return ::Net::LoginData_Operation_descriptor();
}
template <> struct is_proto_enum< ::Net::LoginResponse_Operation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Net::LoginResponse_Operation>() {
  return ::Net::LoginResponse_Operation_descriptor();
}
template <> struct is_proto_enum< ::Net::CharacterData_MoveOpt> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Net::CharacterData_MoveOpt>() {
  return ::Net::CharacterData_MoveOpt_descriptor();
}
template <> struct is_proto_enum< ::Net::CharacterData_AbilityOpt> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Net::CharacterData_AbilityOpt>() {
  return ::Net::CharacterData_AbilityOpt_descriptor();
}
template <> struct is_proto_enum< ::Net::UserMoney_Operation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Net::UserMoney_Operation>() {
  return ::Net::UserMoney_Operation_descriptor();
}
template <> struct is_proto_enum< ::Net::ServerInfo_Operation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Net::ServerInfo_Operation>() {
  return ::Net::ServerInfo_Operation_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_NetworkData_2eproto
