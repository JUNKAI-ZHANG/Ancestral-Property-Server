// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Frame.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Frame_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Frame_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Frame_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Frame_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Frame_2eproto;
namespace FrameProto {
class ChaseFrame;
struct ChaseFrameDefaultTypeInternal;
extern ChaseFrameDefaultTypeInternal _ChaseFrame_default_instance_;
class CloseGame;
struct CloseGameDefaultTypeInternal;
extern CloseGameDefaultTypeInternal _CloseGame_default_instance_;
class Frame;
struct FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class GameReplay;
struct GameReplayDefaultTypeInternal;
extern GameReplayDefaultTypeInternal _GameReplay_default_instance_;
class HashString;
struct HashStringDefaultTypeInternal;
extern HashStringDefaultTypeInternal _HashString_default_instance_;
class PlayerOperate;
struct PlayerOperateDefaultTypeInternal;
extern PlayerOperateDefaultTypeInternal _PlayerOperate_default_instance_;
class StartGame;
struct StartGameDefaultTypeInternal;
extern StartGameDefaultTypeInternal _StartGame_default_instance_;
class UserOperate;
struct UserOperateDefaultTypeInternal;
extern UserOperateDefaultTypeInternal _UserOperate_default_instance_;
}  // namespace FrameProto
PROTOBUF_NAMESPACE_OPEN
template<> ::FrameProto::ChaseFrame* Arena::CreateMaybeMessage<::FrameProto::ChaseFrame>(Arena*);
template<> ::FrameProto::CloseGame* Arena::CreateMaybeMessage<::FrameProto::CloseGame>(Arena*);
template<> ::FrameProto::Frame* Arena::CreateMaybeMessage<::FrameProto::Frame>(Arena*);
template<> ::FrameProto::GameReplay* Arena::CreateMaybeMessage<::FrameProto::GameReplay>(Arena*);
template<> ::FrameProto::HashString* Arena::CreateMaybeMessage<::FrameProto::HashString>(Arena*);
template<> ::FrameProto::PlayerOperate* Arena::CreateMaybeMessage<::FrameProto::PlayerOperate>(Arena*);
template<> ::FrameProto::StartGame* Arena::CreateMaybeMessage<::FrameProto::StartGame>(Arena*);
template<> ::FrameProto::UserOperate* Arena::CreateMaybeMessage<::FrameProto::UserOperate>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace FrameProto {

// ===================================================================

class StartGame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FrameProto.StartGame) */ {
 public:
  inline StartGame() : StartGame(nullptr) {}
  ~StartGame() override;
  explicit constexpr StartGame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartGame(const StartGame& from);
  StartGame(StartGame&& from) noexcept
    : StartGame() {
    *this = ::std::move(from);
  }

  inline StartGame& operator=(const StartGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartGame& operator=(StartGame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartGame& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartGame* internal_default_instance() {
    return reinterpret_cast<const StartGame*>(
               &_StartGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StartGame& a, StartGame& b) {
    a.Swap(&b);
  }
  inline void Swap(StartGame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartGame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartGame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartGame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StartGame& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartGame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FrameProto.StartGame";
  }
  protected:
  explicit StartGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomidFieldNumber = 1,
  };
  // int32 roomid = 1;
  void clear_roomid();
  int32_t roomid() const;
  void set_roomid(int32_t value);
  private:
  int32_t _internal_roomid() const;
  void _internal_set_roomid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:FrameProto.StartGame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t roomid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Frame_2eproto;
};
// -------------------------------------------------------------------

class CloseGame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FrameProto.CloseGame) */ {
 public:
  inline CloseGame() : CloseGame(nullptr) {}
  ~CloseGame() override;
  explicit constexpr CloseGame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CloseGame(const CloseGame& from);
  CloseGame(CloseGame&& from) noexcept
    : CloseGame() {
    *this = ::std::move(from);
  }

  inline CloseGame& operator=(const CloseGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseGame& operator=(CloseGame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CloseGame& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloseGame* internal_default_instance() {
    return reinterpret_cast<const CloseGame*>(
               &_CloseGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CloseGame& a, CloseGame& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseGame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseGame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CloseGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CloseGame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CloseGame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CloseGame& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseGame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FrameProto.CloseGame";
  }
  protected:
  explicit CloseGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomidFieldNumber = 1,
  };
  // int32 roomid = 1;
  void clear_roomid();
  int32_t roomid() const;
  void set_roomid(int32_t value);
  private:
  int32_t _internal_roomid() const;
  void _internal_set_roomid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:FrameProto.CloseGame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t roomid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Frame_2eproto;
};
// -------------------------------------------------------------------

class UserOperate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FrameProto.UserOperate) */ {
 public:
  inline UserOperate() : UserOperate(nullptr) {}
  ~UserOperate() override;
  explicit constexpr UserOperate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserOperate(const UserOperate& from);
  UserOperate(UserOperate&& from) noexcept
    : UserOperate() {
    *this = ::std::move(from);
  }

  inline UserOperate& operator=(const UserOperate& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserOperate& operator=(UserOperate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserOperate& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserOperate* internal_default_instance() {
    return reinterpret_cast<const UserOperate*>(
               &_UserOperate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserOperate& a, UserOperate& b) {
    a.Swap(&b);
  }
  inline void Swap(UserOperate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserOperate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserOperate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserOperate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserOperate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserOperate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserOperate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FrameProto.UserOperate";
  }
  protected:
  explicit UserOperate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsDownFieldNumber = 1,
    kKeyNameFieldNumber = 2,
  };
  // bool is_down = 1;
  void clear_is_down();
  bool is_down() const;
  void set_is_down(bool value);
  private:
  bool _internal_is_down() const;
  void _internal_set_is_down(bool value);
  public:

  // int32 key_name = 2;
  void clear_key_name();
  int32_t key_name() const;
  void set_key_name(int32_t value);
  private:
  int32_t _internal_key_name() const;
  void _internal_set_key_name(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:FrameProto.UserOperate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool is_down_;
  int32_t key_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Frame_2eproto;
};
// -------------------------------------------------------------------

class PlayerOperate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FrameProto.PlayerOperate) */ {
 public:
  inline PlayerOperate() : PlayerOperate(nullptr) {}
  ~PlayerOperate() override;
  explicit constexpr PlayerOperate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerOperate(const PlayerOperate& from);
  PlayerOperate(PlayerOperate&& from) noexcept
    : PlayerOperate() {
    *this = ::std::move(from);
  }

  inline PlayerOperate& operator=(const PlayerOperate& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerOperate& operator=(PlayerOperate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerOperate& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerOperate* internal_default_instance() {
    return reinterpret_cast<const PlayerOperate*>(
               &_PlayerOperate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PlayerOperate& a, PlayerOperate& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerOperate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerOperate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerOperate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerOperate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerOperate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlayerOperate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerOperate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FrameProto.PlayerOperate";
  }
  protected:
  explicit PlayerOperate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyDataFieldNumber = 1,
    kFrameCountFieldNumber = 2,
    kMouseXFieldNumber = 3,
    kMouseYFieldNumber = 4,
  };
  // repeated .FrameProto.UserOperate key_data = 1;
  int key_data_size() const;
  private:
  int _internal_key_data_size() const;
  public:
  void clear_key_data();
  ::FrameProto::UserOperate* mutable_key_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FrameProto::UserOperate >*
      mutable_key_data();
  private:
  const ::FrameProto::UserOperate& _internal_key_data(int index) const;
  ::FrameProto::UserOperate* _internal_add_key_data();
  public:
  const ::FrameProto::UserOperate& key_data(int index) const;
  ::FrameProto::UserOperate* add_key_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FrameProto::UserOperate >&
      key_data() const;

  // int32 frame_count = 2;
  void clear_frame_count();
  int32_t frame_count() const;
  void set_frame_count(int32_t value);
  private:
  int32_t _internal_frame_count() const;
  void _internal_set_frame_count(int32_t value);
  public:

  // float mouse_x = 3;
  void clear_mouse_x();
  float mouse_x() const;
  void set_mouse_x(float value);
  private:
  float _internal_mouse_x() const;
  void _internal_set_mouse_x(float value);
  public:

  // float mouse_y = 4;
  void clear_mouse_y();
  float mouse_y() const;
  void set_mouse_y(float value);
  private:
  float _internal_mouse_y() const;
  void _internal_set_mouse_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:FrameProto.PlayerOperate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FrameProto::UserOperate > key_data_;
  int32_t frame_count_;
  float mouse_x_;
  float mouse_y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Frame_2eproto;
};
// -------------------------------------------------------------------

class ChaseFrame final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:FrameProto.ChaseFrame) */ {
 public:
  inline ChaseFrame() : ChaseFrame(nullptr) {}
  explicit constexpr ChaseFrame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChaseFrame(const ChaseFrame& from);
  ChaseFrame(ChaseFrame&& from) noexcept
    : ChaseFrame() {
    *this = ::std::move(from);
  }

  inline ChaseFrame& operator=(const ChaseFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChaseFrame& operator=(ChaseFrame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChaseFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChaseFrame* internal_default_instance() {
    return reinterpret_cast<const ChaseFrame*>(
               &_ChaseFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ChaseFrame& a, ChaseFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(ChaseFrame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChaseFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChaseFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChaseFrame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ChaseFrame& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ChaseFrame& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FrameProto.ChaseFrame";
  }
  protected:
  explicit ChaseFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:FrameProto.ChaseFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Frame_2eproto;
};
// -------------------------------------------------------------------

class GameReplay final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FrameProto.GameReplay) */ {
 public:
  inline GameReplay() : GameReplay(nullptr) {}
  ~GameReplay() override;
  explicit constexpr GameReplay(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameReplay(const GameReplay& from);
  GameReplay(GameReplay&& from) noexcept
    : GameReplay() {
    *this = ::std::move(from);
  }

  inline GameReplay& operator=(const GameReplay& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameReplay& operator=(GameReplay&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameReplay& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameReplay* internal_default_instance() {
    return reinterpret_cast<const GameReplay*>(
               &_GameReplay_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GameReplay& a, GameReplay& b) {
    a.Swap(&b);
  }
  inline void Swap(GameReplay* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameReplay* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameReplay* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameReplay>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameReplay& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GameReplay& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameReplay* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FrameProto.GameReplay";
  }
  protected:
  explicit GameReplay(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFramesFieldNumber = 1,
  };
  // repeated .FrameProto.Frame frames = 1;
  int frames_size() const;
  private:
  int _internal_frames_size() const;
  public:
  void clear_frames();
  ::FrameProto::Frame* mutable_frames(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FrameProto::Frame >*
      mutable_frames();
  private:
  const ::FrameProto::Frame& _internal_frames(int index) const;
  ::FrameProto::Frame* _internal_add_frames();
  public:
  const ::FrameProto::Frame& frames(int index) const;
  ::FrameProto::Frame* add_frames();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FrameProto::Frame >&
      frames() const;

  // @@protoc_insertion_point(class_scope:FrameProto.GameReplay)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FrameProto::Frame > frames_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Frame_2eproto;
};
// -------------------------------------------------------------------

class Frame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FrameProto.Frame) */ {
 public:
  inline Frame() : Frame(nullptr) {}
  ~Frame() override;
  explicit constexpr Frame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Frame(const Frame& from);
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frame& operator=(Frame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Frame& default_instance() {
    return *internal_default_instance();
  }
  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }
  inline void Swap(Frame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Frame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Frame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Frame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Frame& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FrameProto.Frame";
  }
  protected:
  explicit Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
  };
  // int64 time = 1;
  void clear_time();
  int64_t time() const;
  void set_time(int64_t value);
  private:
  int64_t _internal_time() const;
  void _internal_set_time(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:FrameProto.Frame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Frame_2eproto;
};
// -------------------------------------------------------------------

class HashString final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FrameProto.HashString) */ {
 public:
  inline HashString() : HashString(nullptr) {}
  ~HashString() override;
  explicit constexpr HashString(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HashString(const HashString& from);
  HashString(HashString&& from) noexcept
    : HashString() {
    *this = ::std::move(from);
  }

  inline HashString& operator=(const HashString& from) {
    CopyFrom(from);
    return *this;
  }
  inline HashString& operator=(HashString&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HashString& default_instance() {
    return *internal_default_instance();
  }
  static inline const HashString* internal_default_instance() {
    return reinterpret_cast<const HashString*>(
               &_HashString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(HashString& a, HashString& b) {
    a.Swap(&b);
  }
  inline void Swap(HashString* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HashString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HashString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HashString>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HashString& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HashString& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HashString* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FrameProto.HashString";
  }
  protected:
  explicit HashString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 2,
    kFrameFieldNumber = 1,
  };
  // string hash = 2;
  void clear_hash();
  const std::string& hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // int32 frame = 1;
  void clear_frame();
  int32_t frame() const;
  void set_frame(int32_t value);
  private:
  int32_t _internal_frame() const;
  void _internal_set_frame(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:FrameProto.HashString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  int32_t frame_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Frame_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StartGame

// int32 roomid = 1;
inline void StartGame::clear_roomid() {
  roomid_ = 0;
}
inline int32_t StartGame::_internal_roomid() const {
  return roomid_;
}
inline int32_t StartGame::roomid() const {
  // @@protoc_insertion_point(field_get:FrameProto.StartGame.roomid)
  return _internal_roomid();
}
inline void StartGame::_internal_set_roomid(int32_t value) {
  
  roomid_ = value;
}
inline void StartGame::set_roomid(int32_t value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:FrameProto.StartGame.roomid)
}

// -------------------------------------------------------------------

// CloseGame

// int32 roomid = 1;
inline void CloseGame::clear_roomid() {
  roomid_ = 0;
}
inline int32_t CloseGame::_internal_roomid() const {
  return roomid_;
}
inline int32_t CloseGame::roomid() const {
  // @@protoc_insertion_point(field_get:FrameProto.CloseGame.roomid)
  return _internal_roomid();
}
inline void CloseGame::_internal_set_roomid(int32_t value) {
  
  roomid_ = value;
}
inline void CloseGame::set_roomid(int32_t value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:FrameProto.CloseGame.roomid)
}

// -------------------------------------------------------------------

// UserOperate

// bool is_down = 1;
inline void UserOperate::clear_is_down() {
  is_down_ = false;
}
inline bool UserOperate::_internal_is_down() const {
  return is_down_;
}
inline bool UserOperate::is_down() const {
  // @@protoc_insertion_point(field_get:FrameProto.UserOperate.is_down)
  return _internal_is_down();
}
inline void UserOperate::_internal_set_is_down(bool value) {
  
  is_down_ = value;
}
inline void UserOperate::set_is_down(bool value) {
  _internal_set_is_down(value);
  // @@protoc_insertion_point(field_set:FrameProto.UserOperate.is_down)
}

// int32 key_name = 2;
inline void UserOperate::clear_key_name() {
  key_name_ = 0;
}
inline int32_t UserOperate::_internal_key_name() const {
  return key_name_;
}
inline int32_t UserOperate::key_name() const {
  // @@protoc_insertion_point(field_get:FrameProto.UserOperate.key_name)
  return _internal_key_name();
}
inline void UserOperate::_internal_set_key_name(int32_t value) {
  
  key_name_ = value;
}
inline void UserOperate::set_key_name(int32_t value) {
  _internal_set_key_name(value);
  // @@protoc_insertion_point(field_set:FrameProto.UserOperate.key_name)
}

// -------------------------------------------------------------------

// PlayerOperate

// repeated .FrameProto.UserOperate key_data = 1;
inline int PlayerOperate::_internal_key_data_size() const {
  return key_data_.size();
}
inline int PlayerOperate::key_data_size() const {
  return _internal_key_data_size();
}
inline void PlayerOperate::clear_key_data() {
  key_data_.Clear();
}
inline ::FrameProto::UserOperate* PlayerOperate::mutable_key_data(int index) {
  // @@protoc_insertion_point(field_mutable:FrameProto.PlayerOperate.key_data)
  return key_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FrameProto::UserOperate >*
PlayerOperate::mutable_key_data() {
  // @@protoc_insertion_point(field_mutable_list:FrameProto.PlayerOperate.key_data)
  return &key_data_;
}
inline const ::FrameProto::UserOperate& PlayerOperate::_internal_key_data(int index) const {
  return key_data_.Get(index);
}
inline const ::FrameProto::UserOperate& PlayerOperate::key_data(int index) const {
  // @@protoc_insertion_point(field_get:FrameProto.PlayerOperate.key_data)
  return _internal_key_data(index);
}
inline ::FrameProto::UserOperate* PlayerOperate::_internal_add_key_data() {
  return key_data_.Add();
}
inline ::FrameProto::UserOperate* PlayerOperate::add_key_data() {
  ::FrameProto::UserOperate* _add = _internal_add_key_data();
  // @@protoc_insertion_point(field_add:FrameProto.PlayerOperate.key_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FrameProto::UserOperate >&
PlayerOperate::key_data() const {
  // @@protoc_insertion_point(field_list:FrameProto.PlayerOperate.key_data)
  return key_data_;
}

// int32 frame_count = 2;
inline void PlayerOperate::clear_frame_count() {
  frame_count_ = 0;
}
inline int32_t PlayerOperate::_internal_frame_count() const {
  return frame_count_;
}
inline int32_t PlayerOperate::frame_count() const {
  // @@protoc_insertion_point(field_get:FrameProto.PlayerOperate.frame_count)
  return _internal_frame_count();
}
inline void PlayerOperate::_internal_set_frame_count(int32_t value) {
  
  frame_count_ = value;
}
inline void PlayerOperate::set_frame_count(int32_t value) {
  _internal_set_frame_count(value);
  // @@protoc_insertion_point(field_set:FrameProto.PlayerOperate.frame_count)
}

// float mouse_x = 3;
inline void PlayerOperate::clear_mouse_x() {
  mouse_x_ = 0;
}
inline float PlayerOperate::_internal_mouse_x() const {
  return mouse_x_;
}
inline float PlayerOperate::mouse_x() const {
  // @@protoc_insertion_point(field_get:FrameProto.PlayerOperate.mouse_x)
  return _internal_mouse_x();
}
inline void PlayerOperate::_internal_set_mouse_x(float value) {
  
  mouse_x_ = value;
}
inline void PlayerOperate::set_mouse_x(float value) {
  _internal_set_mouse_x(value);
  // @@protoc_insertion_point(field_set:FrameProto.PlayerOperate.mouse_x)
}

// float mouse_y = 4;
inline void PlayerOperate::clear_mouse_y() {
  mouse_y_ = 0;
}
inline float PlayerOperate::_internal_mouse_y() const {
  return mouse_y_;
}
inline float PlayerOperate::mouse_y() const {
  // @@protoc_insertion_point(field_get:FrameProto.PlayerOperate.mouse_y)
  return _internal_mouse_y();
}
inline void PlayerOperate::_internal_set_mouse_y(float value) {
  
  mouse_y_ = value;
}
inline void PlayerOperate::set_mouse_y(float value) {
  _internal_set_mouse_y(value);
  // @@protoc_insertion_point(field_set:FrameProto.PlayerOperate.mouse_y)
}

// -------------------------------------------------------------------

// ChaseFrame

// -------------------------------------------------------------------

// GameReplay

// repeated .FrameProto.Frame frames = 1;
inline int GameReplay::_internal_frames_size() const {
  return frames_.size();
}
inline int GameReplay::frames_size() const {
  return _internal_frames_size();
}
inline void GameReplay::clear_frames() {
  frames_.Clear();
}
inline ::FrameProto::Frame* GameReplay::mutable_frames(int index) {
  // @@protoc_insertion_point(field_mutable:FrameProto.GameReplay.frames)
  return frames_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FrameProto::Frame >*
GameReplay::mutable_frames() {
  // @@protoc_insertion_point(field_mutable_list:FrameProto.GameReplay.frames)
  return &frames_;
}
inline const ::FrameProto::Frame& GameReplay::_internal_frames(int index) const {
  return frames_.Get(index);
}
inline const ::FrameProto::Frame& GameReplay::frames(int index) const {
  // @@protoc_insertion_point(field_get:FrameProto.GameReplay.frames)
  return _internal_frames(index);
}
inline ::FrameProto::Frame* GameReplay::_internal_add_frames() {
  return frames_.Add();
}
inline ::FrameProto::Frame* GameReplay::add_frames() {
  ::FrameProto::Frame* _add = _internal_add_frames();
  // @@protoc_insertion_point(field_add:FrameProto.GameReplay.frames)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FrameProto::Frame >&
GameReplay::frames() const {
  // @@protoc_insertion_point(field_list:FrameProto.GameReplay.frames)
  return frames_;
}

// -------------------------------------------------------------------

// Frame

// int64 time = 1;
inline void Frame::clear_time() {
  time_ = int64_t{0};
}
inline int64_t Frame::_internal_time() const {
  return time_;
}
inline int64_t Frame::time() const {
  // @@protoc_insertion_point(field_get:FrameProto.Frame.time)
  return _internal_time();
}
inline void Frame::_internal_set_time(int64_t value) {
  
  time_ = value;
}
inline void Frame::set_time(int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:FrameProto.Frame.time)
}

// -------------------------------------------------------------------

// HashString

// int32 frame = 1;
inline void HashString::clear_frame() {
  frame_ = 0;
}
inline int32_t HashString::_internal_frame() const {
  return frame_;
}
inline int32_t HashString::frame() const {
  // @@protoc_insertion_point(field_get:FrameProto.HashString.frame)
  return _internal_frame();
}
inline void HashString::_internal_set_frame(int32_t value) {
  
  frame_ = value;
}
inline void HashString::set_frame(int32_t value) {
  _internal_set_frame(value);
  // @@protoc_insertion_point(field_set:FrameProto.HashString.frame)
}

// string hash = 2;
inline void HashString::clear_hash() {
  hash_.ClearToEmpty();
}
inline const std::string& HashString::hash() const {
  // @@protoc_insertion_point(field_get:FrameProto.HashString.hash)
  return _internal_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HashString::set_hash(ArgT0&& arg0, ArgT... args) {
 
 hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FrameProto.HashString.hash)
}
inline std::string* HashString::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:FrameProto.HashString.hash)
  return _s;
}
inline const std::string& HashString::_internal_hash() const {
  return hash_.Get();
}
inline void HashString::_internal_set_hash(const std::string& value) {
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* HashString::_internal_mutable_hash() {
  
  return hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* HashString::release_hash() {
  // @@protoc_insertion_point(field_release:FrameProto.HashString.hash)
  return hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void HashString::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FrameProto.HashString.hash)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace FrameProto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Frame_2eproto
